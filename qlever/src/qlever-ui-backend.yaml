- {alternativeObjectName: '', alternativePredicateName: '', alternativeSubjectName: '',
  apiToken: '', baseUrl: 'http://localhost:7019/', defaultModeTimeout: 0.0, dynamicSuggestions: 2,
  entityNameAndAliasPattern: 'BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity
    AS ?alias)', entityNameAndAliasPatternDefault: 'BIND(?qleverui_entity AS ?name)
    BIND(?qleverui_entity AS ?alias)', entityScorePattern: '{ SELECT ?qleverui_entity
    (COUNT(?predicate) AS ?count) WHERE { ?qleverui_entity ?predicate ?object } GROUP
    BY ?qleverui_entity }', fillPrefixes: '1', filterEntities: '1', filteredLanguage: en,
  frequentPatternsWithoutOrder: '', frequentPredicates: '', id: 86, isDefault: '1',
  isNoSlugMode: '1', mapViewBaseURL: '', maxDefault: 100, mixedModeTimeout: 1.0, name: Burgerbibliothek
    Bern, objectName: '', predicateName: '', predicateNameAndAliasPatternWithContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', replacePredicates: '', slug: bbb,
  sortKey: '0', subjectName: '', suggestObjects: "%PREFIXES%\nSELECT ?qleverui_entity\n\
    \              (MIN(?name) AS ?qleverui_name)\n              (MIN(?alias) AS ?qleverui_alias)\n\
    \              (MAX(?count_1) AS ?qleverui_count) WHERE {\n  {\n\n    { SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qleverui_entity .\n      } GROUP BY ?qleverui_entity }\n\
    \      { %WARMUP_QUERY_3% }\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n\n  } UNION {\n\n    { SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qleverui_entity\n      } GROUP BY ?qleverui_entity }\n\
    \      %ENTITY_NAME_AND_ALIAS_PATTERN_DEFAULT%\n      # IF !CURRENT_WORD_EMPTY\
    \ #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n      # ENDIF #\n \
    \   } }\n\n  }\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", suggestObjectsContextInsensitive: "%PREFIXES%\n\
    # IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity\
    \ (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count)\
    \ AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY\
    \ ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestPredicates: "%PREFIXES%\n\
    # IF !CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n              (MIN(?name)\
    \ as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n       \
    \       (SAMPLE(?count_2) as ?qleverui_count)\n              ?qleverui_reversed\
    \ WHERE {\n\n  { { SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n\
    \    WHERE { %CURRENT_SUBJECT% ?qleverui_entity ?qleverui_tmp  }\n    GROUP BY\
    \ ?qleverui_entity }\n  BIND (0 AS ?qleverui_reversed) }\n  UNION\n  { { SELECT\
    \ ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n    WHERE { ?qleverui_tmp\
    \ ?qleverui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qleverui_entity }\n   \
    \ BIND (1 AS ?qleverui_reversed) }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ?qleverui_reversed ORDER BY DESC(?qleverui_count)\n\n# ENDIF\
    \ #\n# IF CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n\
    \              (MIN(?name) as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n\
    \              (SAMPLE(?count_1) as ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\"\
    , \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\
    \n# ENDIF #\n\n# IF !CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\n\
    SELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n      \
    \        (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_2) as\
    \ ?qleverui_count) WHERE {\n  { SELECT ?qleverui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%)\
    \ AS ?count_2)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qleverui_entity\
    \ ?object }\n    GROUP BY ?qleverui_entity }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestPredicatesContextInsensitive: "%PREFIXES%\n\
    \nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n    \
    \          (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_1) as\
    \ ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", suggestPrefixnamesForPredicates: '1',
  suggestSubjects: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n\
    # ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\"\
    )\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n\
    # ENDIF #", suggestSubjectsContextInsensitive: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY\
    \ #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name)\
    \ AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\
    \n# ENDIF #", suggestedPrefixes: "@prefix bio: <http://purl.org/vocab/bio/0.1/>\
    \ .\r\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\r\n@prefix rico:\
    \ <https://www.ica.org/standards/RiC/ontology#> .\r\n@prefix wd: <http://www.wikidata.org/entity/>\
    \ .\r\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\r\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#>\
    \ .", suggestionAltNameVariable: '?qleverui_alias', suggestionEntityVariable: '?qleverui_entity',
  suggestionNameVariable: '?qleverui_name', suggestionReversedVariable: '?qleverui_reversed',
  supportedFunctions: 'asc, desc, avg, values, score, text, count, sample, min, max,
    average, concat, group_concat, langMatches, lang, regex, sum', supportedKeywords: 'prefix,
    select, distinct, where, order, limit, offset, optional, by, as, having, not,
    textlimit, contains-entity, contains-word, filter, group, union, optional, has-predicate,
    minus, values', supportedPredicateSuggestions: 'ql:contains-word, ql:contains-entity',
  warmupQuery1: "SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\r\n  { SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n    %ENTITY_SCORE_PATTERN%\r\
    \n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\r\n  ORDER BY ?qleverui_entity }\r\n}\
    \ GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", warmupQuery2: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?alias", warmupQuery3: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?qleverui_entity", warmupQuery4: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%\r\n  } } }", warmupQuery5: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%\r\n  } } }"}
- {alternativeObjectName: '', alternativePredicateName: '', alternativeSubjectName: '',
  apiToken: aof4Ad, baseUrl: 'https://qlever.cs.uni-freiburg.de/api/ohm-planet', defaultModeTimeout: 5.0,
  dynamicSuggestions: 3, entityNameAndAliasPattern: '?qleverui_entity osmkey:name
    ?name . ?qleverui_entity osmkey:name|osmkey:alt_name|osmkey:name:en|osmkey:name:de
    ?alias', entityNameAndAliasPatternDefault: 'BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity
    AS ?alias)', entityScorePattern: '{ SELECT ?qleverui_entity ?count WHERE { ?qleverui_entity
    rdf:type osm:relation { ?qleverui_entity osm2rdf:area ?count } UNION { ?qleverui_entity
    osmkey:waterway "river" { SELECT ?qleverui_entity (10 * SUM(?length) AS ?count)
    WHERE { ?qleverui_entity osmrel:member/osm:id/osm2rdf:length ?length } GROUP BY
    ?qleverui_entity } } } }', fillPrefixes: '1', filterEntities: '0', filteredLanguage: en,
  frequentPatternsWithoutOrder: '', frequentPredicates: '', id: 68, isDefault: '0',
  isNoSlugMode: '0', mapViewBaseURL: 'https://qlever.cs.uni-freiburg.de/petrimaps',
  maxDefault: 100, mixedModeTimeout: 3.0, name: OHM Planet, objectName: '', predicateName: '',
  predicateNameAndAliasPatternWithContext: 'BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity
    AS ?alias)', predicateNameAndAliasPatternWithContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', replacePredicates: '', slug: ohm-planet,
  sortKey: B.2a, subjectName: '?qleverui_entity <https://www.openstreetmap.org/wiki/Key:name>
    ?qleverui_name .', suggestObjects: "%PREFIXES%\nSELECT ?qui_entity (SAMPLE(?name)\
    \ as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count)\
    \ WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n   \
    \ %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n  }\
    \ GROUP BY ?qui_entity }\n  # IF CURRENT_WORD_EMPTY #\n  OPTIONAL { ?qui_entity\
    \ osmkey:name ?name }\n  BIND (?qui_entity AS ?alias)\n  # ELSE #\n  OPTIONAL\
    \ { ?qui_entity osmkey:name ?name }\n  OPTIONAL { ?qui_entity osmkey:name:en ?optional_alias\
    \ }\n  BIND (COALESCE(?optional_alias, ?qui_entity) AS ?alias)\n  FILTER (REGEX(STR(?name),\
    \ \"^%CURRENT_WORD%\") || REGEX(STR(?alias), \"^%CURRENT_WORD%\"))\n  # ENDIF\
    \ #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)", suggestObjectsContextInsensitive: "%PREFIXES%\n\
    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias)\
    \ (SAMPLE(?count) as ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity)\
    \ AS ?count) WHERE {\n    %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n\
    \  } GROUP BY ?qui_entity }\n  # IF CURRENT_WORD_EMPTY #\n  OPTIONAL { ?qui_entity\
    \ osmkey:name ?name }\n  BIND (?qui_entity AS ?alias)\n  # ELSE #\n  OPTIONAL\
    \ { ?qui_entity osmkey:name ?name }\n  OPTIONAL { ?qui_entity osmkey:name:en ?optional_alias\
    \ }\n  BIND (COALESCE(?optional_alias, ?qui_entity) AS ?alias)\n  FILTER (REGEX(STR(?name),\
    \ \"^%CURRENT_WORD%\") || REGEX(STR(?alias), \"^%CURRENT_WORD%\"))\n  # ENDIF\
    \ #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)", suggestPredicates: "%PREFIXES%\n\
    # IF !CURRENT_SUBJECT_VARIABLE #\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name)\
    \ (SAMPLE(?name) as ?qui_alias) (SAMPLE(?count) as ?qui_count) ?qui_reversed WHERE\
    \ {\n  { { SELECT ?qui_entity (COUNT(?qui_object) AS ?count)\n    WHERE { %CURRENT_SUBJECT%\
    \ ?qui_entity ?qui_object  }\n    GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed)\
    \ }\n  UNION\n  { { SELECT ?qui_entity (COUNT(?qui_subject) AS ?count)\n    WHERE\
    \ { ?qui_subject ?qui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qui_entity }\
    \ BIND (1 AS ?qui_reversed) }\n  BIND (?qui_entity AS ?name)\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?name), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qui_entity ?qui_reversed ORDER BY DESC(?qui_count)\n# ENDIF #\n# IF CURRENT_SUBJECT_VARIABLE\
    \ #\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?name) as ?qui_alias)\
    \ (SAMPLE(?count) as ?qui_count) WHERE {\n  # IF CONNECTED_TRIPLES_EMPTY #\n \
    \ { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count)\n    WHERE { ?qui_subject\
    \ ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  # ELSE #\n  { SELECT\
    \ ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?count)\n    WHERE { %CONNECTED_TRIPLES%\
    \ %CURRENT_SUBJECT% ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  #\
    \ ENDIF #\n  BIND (?qui_entity AS ?name)\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER\
    \ REGEX(STR(?name), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY ?qui_entity\
    \ ORDER BY DESC(?qui_count)\n# ENDIF #", suggestPredicatesContextInsensitive: "%PREFIXES%\n\
    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?name) as ?qui_alias)\
    \ (SAMPLE(?count) as ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity)\
    \ AS ?count)\n    WHERE { ?qui_subject ?qui_entity ?qui_object }\n    GROUP BY\
    \ ?qui_entity }\n  BIND (?qui_entity AS ?name)\n  # IF !CURRENT_WORD_EMPTY #\n\
    \  FILTER REGEX(STR(?name), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY\
    \ ?qui_entity ORDER BY DESC(?qui_count)", suggestPrefixnamesForPredicates: '0',
  suggestSubjects: "%PREFIXES%\n# IF !CURRENT_WORD_EMPTY #\nSELECT ?qui_entity (SAMPLE(?name)\
    \ AS ?qui_name) (SAMPLE(?alias) AS ?qui_alias) (SAMPLE(?count) AS ?qui_count)\
    \ WHERE {\n  { { SELECT ?qui_entity ?name ?alias WHERE {\n      { ?qui_entity\
    \ osmkey:name ?name BIND(?name AS ?alias) FILTER REGEX(STR(?name), \"^%CURRENT_WORD%\"\
    ) } UNION\n      { ?qui_entity osmkey:name ?name . ?qui_entity osmkey:name:en\
    \ ?alias FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\") } } }\n    ?qui_entity\
    \ rdf:type osm:relation . ?qui_entity osm2rdf:area ?count }\n    UNION\n    {\
    \ { SELECT ?qui_entity ?name ?alias WHERE {\n      { ?qui_entity osmkey:name ?name\
    \ BIND(?name AS ?alias) FILTER REGEX(STR(?name), \"^%CURRENT_WORD%\") } UNION\n\
    \      { ?qui_entity osmkey:name ?name . ?qui_entity osmkey:name:en ?alias FILTER\
    \ REGEX(STR(?alias), \"^%CURRENT_WORD%\") } } }\n    ?qui_entity osmkey:waterway\
    \ \"river\"\n    { SELECT ?qui_entity (10 * SUM(?length) AS ?count)\n      WHERE\
    \ { ?qui_entity osmrel:member/osm:id/osm2rdf:length ?length } GROUP BY ?qui_entity\
    \ } }\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)\n# ENDIF #", suggestSubjectsContextInsensitive: "%PREFIXES%\n\
    # IF !CURRENT_WORD_EMPTY #\nSELECT ?qui_entity (SAMPLE(?name) AS ?qui_name) (SAMPLE(?alias)\
    \ AS ?qui_alias) (SAMPLE(?count) AS ?qui_count) WHERE {\n  { { SELECT ?qui_entity\
    \ ?name ?alias WHERE {\n      { ?qui_entity osmkey:name ?name BIND(?name AS ?alias)\
    \ FILTER REGEX(STR(?name), \"^%CURRENT_WORD%\") } UNION\n      { ?qui_entity osmkey:name\
    \ ?name . ?qui_entity osmkey:name:en ?alias FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\"\
    ) } } }\n    ?qui_entity rdf:type osm:relation . ?qui_entity osm2rdf:area ?count\
    \ }\n    UNION\n    { { SELECT ?qui_entity ?name ?alias WHERE {\n      { ?qui_entity\
    \ osmkey:name ?name BIND(?name AS ?alias) FILTER REGEX(STR(?name), \"^%CURRENT_WORD%\"\
    ) } UNION\n      { ?qui_entity osmkey:name ?name . ?qui_entity osmkey:name:en\
    \ ?alias FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\") } } }\n    ?qui_entity\
    \ osmkey:waterway \"river\"\n    { SELECT ?qui_entity (10 * SUM(?length) AS ?count)\n\
    \      WHERE { ?qui_entity osmrel:member/osm:id/osm2rdf:length ?length } GROUP\
    \ BY ?qui_entity } }\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)\n# ENDIF\
    \ #", suggestedPrefixes: "@prefix ohmnode: <https://www.openhistoricalmap.org/node/>\
    \ .\r\n@prefix osmrel: <https://www.openstreetmap.org/relation/> .\r\n@prefix\
    \ osmnode: <https://www.openstreetmap.org/node/> .\r\n@prefix osmkey: <https://www.openstreetmap.org/wiki/Key:>\
    \ .\r\n@prefix osmway: <https://www.openstreetmap.org/way/> .\r\n@prefix osmmeta:\
    \ <https://www.openstreetmap.org/meta/> .\r\n@prefix osm: <https://www.openstreetmap.org/>\
    \ .\r\n@prefix osm2rdfmeta: <https://osm2rdf.cs.uni-freiburg.de/rdf/meta#> .\r\
    \n@prefix ohmrel: <https://www.openhistoricalmap.org/relation/> .\r\n@prefix osm2rdfmember:\
    \ <https://osm2rdf.cs.uni-freiburg.de/rdf/member#> .\r\n@prefix osm2rdfkey: <https://osm2rdf.cs.uni-freiburg.de/rdf/key#>\
    \ .\r\n@prefix osm2rdfgeom: <https://osm2rdf.cs.uni-freiburg.de/rdf/geom#> .\r\
    \n@prefix ohmway: <https://www.openhistoricalmap.org/way/> .\r\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\
    \ .\r\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\r\n@prefix ohm: <https://www.openhistoricalmap.org/>\
    \ .\r\n@prefix wd: <http://www.wikidata.org/entity/> .\r\n@prefix osm2rdf: <https://osm2rdf.cs.uni-freiburg.de/rdf#>\
    \ .\r\n@prefix ogc: <http://www.opengis.net/rdf#> .\r\n@prefix geo: <http://www.opengis.net/ont/geosparql#>\
    \ .", suggestionAltNameVariable: '?qui_alias', suggestionEntityVariable: '?qui_entity',
  suggestionNameVariable: '?qui_name', suggestionReversedVariable: '?qui_reversed',
  supportedFunctions: 'asc, desc, avg, values, score, text, count, sample, min, max,
    average, concat, group_concat, langMatches, lang, regex, sum, dist, contains,
    str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year,
    month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if,
    coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric,
    bound', supportedKeywords: 'prefix, select, construct, distinct, where, order,
    limit, offset, optional, by, as, having, not, textlimit, contains-entity, contains-word,
    filter, group, union, optional, has-predicate, bind, minus, service, internal,
    sort, keywords', supportedPredicateSuggestions: 'ql:contains-word, ql:contains-entity',
  warmupQuery1: "SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\r\n  { SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n    %ENTITY_SCORE_PATTERN%\r\
    \n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\r\n  ORDER BY ?qleverui_entity }\r\n}\
    \ GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", warmupQuery2: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?alias", warmupQuery3: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?qleverui_entity", warmupQuery4: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%\r\n  } } }", warmupQuery5: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%\r\n  } } }"}
- {alternativeObjectName: '', alternativePredicateName: '', alternativeSubjectName: '',
  apiToken: '', baseUrl: 'https://qlever.cs.uni-freiburg.de/api/imdb', defaultModeTimeout: 5.0,
  dynamicSuggestions: 2, entityNameAndAliasPattern: '?qleverui_entity imdb:title ?name
    . BIND(?name AS ?alias)', entityNameAndAliasPatternDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', entityScorePattern: '?qleverui_entity
    imdb:numVotes ?count .', fillPrefixes: '1', filterEntities: '0', filteredLanguage: en,
  frequentPatternsWithoutOrder: '', frequentPredicates: '', id: 55, isDefault: '0',
  isNoSlugMode: '0', mapViewBaseURL: '', maxDefault: 100, mixedModeTimeout: 1.0, name: IMDb,
  objectName: '', predicateName: '', predicateNameAndAliasPatternWithContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', replacePredicates: '', slug: imdb,
  sortKey: C.4, subjectName: '', suggestObjects: "%PREFIXES%\nSELECT ?qleverui_entity\n\
    \              (MIN(?name) AS ?qleverui_name)\n              (MIN(?alias) AS ?qleverui_alias)\n\
    \              (MAX(?count_1) AS ?qleverui_count) WHERE {\n  {\n\n    { SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qleverui_entity .\n      } GROUP BY ?qleverui_entity }\n\
    \      { %WARMUP_QUERY_3% }\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER (REGEX(?alias,\
    \ \"^\\\"%CURRENT_WORD%\") || REGEX(?alias, \"^<%CURRENT_WORD%\"))\n      # ENDIF\
    \ #\n    } }\n\n  } UNION {\n\n    { SELECT ?qleverui_entity ?name ?alias ?count_1\
    \ WHERE {\n      { SELECT ?qleverui_entity (COUNT(?qleverui_entity) AS ?count_1)\
    \ WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qleverui_entity\n\
    \      } GROUP BY ?qleverui_entity }\n      %ENTITY_NAME_AND_ALIAS_PATTERN_DEFAULT%\n\
    \      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(?alias, \"^%CURRENT_WORD%\"\
    )\n      # ENDIF #\n    } }\n\n  }\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)",
  suggestObjectsContextInsensitive: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\
    \n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER (REGEX(?alias, \"^\\\"%CURRENT_WORD%\"\
    ) || REGEX(?alias, \"^<%CURRENT_WORD%\"))\n  # ENDIF #\n} GROUP BY ?qleverui_entity\
    \ ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestPredicates: "%PREFIXES%\n\
    # IF !CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n              (MIN(?name)\
    \ as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n       \
    \       (SAMPLE(?count_2) as ?qleverui_count)\n              ?qleverui_reversed\
    \ WHERE {\n\n  { { SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n\
    \    WHERE { %CURRENT_SUBJECT% ?qleverui_entity ?qleverui_tmp  }\n    GROUP BY\
    \ ?qleverui_entity }\n  BIND (0 AS ?qleverui_reversed) }\n  UNION\n  { { SELECT\
    \ ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n    WHERE { ?qleverui_tmp\
    \ ?qleverui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qleverui_entity }\n   \
    \ BIND (1 AS ?qleverui_reversed) }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(?alias, \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY\
    \ ?qleverui_entity ?qleverui_reversed ORDER BY DESC(?qleverui_count)\n\n# ENDIF\
    \ #\n# IF CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n\
    \              (MIN(?name) as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n\
    \              (SAMPLE(?count_1) as ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(?alias, \"%CURRENT_WORD%\",\
    \ \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\
    \n# ENDIF #\n\n# IF !CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\n\
    SELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n      \
    \        (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_2) as\
    \ ?qleverui_count) WHERE {\n  { SELECT ?qleverui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%)\
    \ AS ?count_2)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qleverui_entity\
    \ ?object }\n    GROUP BY ?qleverui_entity }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(?alias, \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY\
    \ ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestPredicatesContextInsensitive: "%PREFIXES%\n\
    \nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n    \
    \          (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_1) as\
    \ ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(?alias, \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY\
    \ ?qleverui_entity ORDER BY DESC(?qleverui_count)", suggestPrefixnamesForPredicates: '1',
  suggestSubjects: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n\
    # ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER (REGEX(?alias, \"^\\\"%CURRENT_WORD%\"\
    ) || REGEX(?alias, \"^<%CURRENT_WORD%\"))\n  # ENDIF #\n} GROUP BY ?qleverui_entity\
    \ ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestSubjectsContextInsensitive: "%PREFIXES%\n\
    # IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity\
    \ (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count)\
    \ AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER (REGEX(?alias, \"^\\\"%CURRENT_WORD%\") || REGEX(?alias, \"^<%CURRENT_WORD%\"\
    ))\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n\
    # ENDIF #", suggestedPrefixes: 'PREFIX imdb: <https://www.imdb.com/>', suggestionAltNameVariable: '?qleverui_alias',
  suggestionEntityVariable: '?qleverui_entity', suggestionNameVariable: '?qleverui_name',
  suggestionReversedVariable: '?qleverui_reversed', supportedFunctions: 'asc, desc,
    avg, values, score, text, count, sample, min, max, average, concat, group_concat,
    langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts,
    strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor,
    round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri,
    isiri, isblank, isliteral, isNumeric, bound', supportedKeywords: 'prefix, select,
    construct, distinct, where, order, limit, offset, optional, by, as, having, not,
    textlimit, contains-entity, contains-word, filter, group, union, optional, has-predicate,
    bind, minus, service, internal, sort, keywords', supportedPredicateSuggestions: 'ql:contains-word,
    ql:contains-entity', warmupQuery1: "SELECT ?qleverui_entity (SAMPLE(?name) AS\
    \ ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\r\n  { SELECT ?qleverui_entity ?name ?alias ?count WHERE {\r\n    %ENTITY_SCORE_PATTERN%\r\
    \n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\r\n  ORDER BY ?qleverui_entity }\r\n}\
    \ GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", warmupQuery2: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} ORDER BY ?alias", warmupQuery3: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} ORDER BY ?qleverui_entity", warmupQuery4: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\
    \ .\r\n    FILTER (?qleverui_entity != <QLever-internal-function/langtag>)\r\n\
    \  } UNION {\r\n    { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT% .\r\n    FILTER\
    \ (?qleverui_entity != <QLever-internal-function/langtag>)\r\n  } }", warmupQuery5: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\
    \ .\r\n    FILTER (?qleverui_entity != <QLever-internal-function/langtag>)\r\n\
    \  } UNION {\r\n    { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT% .\r\n    FILTER (?qleverui_entity\
    \ != <QLever-internal-function/langtag>)\r\n  } }"}
- {alternativeObjectName: '', alternativePredicateName: '', alternativeSubjectName: '',
  apiToken: '', baseUrl: 'http://localhost:7001', defaultModeTimeout: 5.0, dynamicSuggestions: 2,
  entityNameAndAliasPattern: 'BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity
    AS ?alias)', entityNameAndAliasPatternDefault: 'BIND(?qleverui_entity AS ?name)
    BIND(?qleverui_entity AS ?alias)', entityScorePattern: '{ SELECT ?qleverui_entity
    (COUNT(?qleverui_tmp) AS ?count) WHERE { ?qleverui_entity ql:has-predicate ?qleverui_tmp
    } GROUP BY ?qleverui_entity }', fillPrefixes: '1', filterEntities: '0', filteredLanguage: en,
  frequentPatternsWithoutOrder: '', frequentPredicates: '', id: 45, isDefault: '0',
  isNoSlugMode: '0', mapViewBaseURL: '', maxDefault: 100, mixedModeTimeout: 1.0, name: Default,
  objectName: '', predicateName: '', predicateNameAndAliasPatternWithContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', replacePredicates: '', slug: default,
  sortKey: '0', subjectName: '', suggestObjects: "%PREFIXES%\nSELECT ?qleverui_entity\n\
    \              (MIN(?name) AS ?qleverui_name)\n              (MIN(?alias) AS ?qleverui_alias)\n\
    \              (MAX(?count_1) AS ?qleverui_count) WHERE {\n  {\n\n    { SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qleverui_entity .\n      } GROUP BY ?qleverui_entity }\n\
    \      { %WARMUP_QUERY_3% }\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER (REGEX(?alias,\
    \ \"^\\\"%CURRENT_WORD%\") || REGEX(?alias, \"^<%CURRENT_WORD%\"))\n      # ENDIF\
    \ #\n    } }\n\n  } UNION {\n\n    { SELECT ?qleverui_entity ?name ?alias ?count_1\
    \ WHERE {\n      { SELECT ?qleverui_entity (COUNT(?qleverui_entity) AS ?count_1)\
    \ WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qleverui_entity\n\
    \      } GROUP BY ?qleverui_entity }\n      %ENTITY_NAME_AND_ALIAS_PATTERN_DEFAULT%\n\
    \      # IF !CURRENT_WORD_EMPTY #\n      FILTER (REGEX(?alias, \"^\\\"%CURRENT_WORD%\"\
    ) || REGEX(?alias, \"^<%CURRENT_WORD%\"))\n      # ENDIF #\n    } }\n\n  }\n}\
    \ GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", suggestObjectsContextInsensitive: "%PREFIXES%\n\
    # IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity\
    \ (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count)\
    \ AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER (REGEX(?alias, \"^\\\"%CURRENT_WORD%\") || REGEX(?alias, \"^<%CURRENT_WORD%\"\
    ))\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n\
    # ENDIF #", suggestPredicates: "%PREFIXES%\n# IF !CURRENT_SUBJECT_VARIABLE #\n\
    \nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n    \
    \          (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_2) as\
    \ ?qleverui_count)\n              ?qleverui_reversed WHERE {\n\n  { { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_tmp) AS ?count_2)\n    WHERE { %CURRENT_SUBJECT% ?qleverui_entity\
    \ ?qleverui_tmp  }\n    GROUP BY ?qleverui_entity }\n  BIND (0 AS ?qleverui_reversed)\
    \ }\n  UNION\n  { { SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n\
    \    WHERE { ?qleverui_tmp ?qleverui_entity %CURRENT_SUBJECT%  }\n    GROUP BY\
    \ ?qleverui_entity }\n    BIND (1 AS ?qleverui_reversed) }\n  { %WARMUP_QUERY_5%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(?alias, \"%CURRENT_WORD%\",\
    \ \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ?qleverui_reversed ORDER BY\
    \ DESC(?qleverui_count)\n\n# ENDIF #\n# IF CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE\
    \ #\n\nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n\
    \              (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_1)\
    \ as ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(?alias, \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY\
    \ ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #\n\n# IF !CONNECTED_TRIPLES_EMPTY\
    \ AND CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n              (MIN(?name)\
    \ as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n       \
    \       (SAMPLE(?count_2) as ?qleverui_count) WHERE {\n  { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_2)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT%\
    \ ql:has-predicate ?qleverui_entity }\n    GROUP BY ?qleverui_entity }\n  { %WARMUP_QUERY_5%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(?alias, \"%CURRENT_WORD%\",\
    \ \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\
    \n# ENDIF #", suggestPredicatesContextInsensitive: "%PREFIXES%\n\nSELECT ?qleverui_entity\n\
    \              (MIN(?name) as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n\
    \              (SAMPLE(?count_1) as ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(?alias, \"%CURRENT_WORD%\",\
    \ \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)",
  suggestPrefixnamesForPredicates: '1', suggestSubjects: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY\
    \ #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name)\
    \ AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER (REGEX(?alias,\
    \ \"^\\\"%CURRENT_WORD%\") || REGEX(?alias, \"^<%CURRENT_WORD%\"))\n  # ENDIF\
    \ #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #",
  suggestSubjectsContextInsensitive: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\
    \n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER (REGEX(?alias, \"^\\\"%CURRENT_WORD%\"\
    ) || REGEX(?alias, \"^<%CURRENT_WORD%\"))\n  # ENDIF #\n} GROUP BY ?qleverui_entity\
    \ ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestedPrefixes: "@prefix rdf:\
    \ <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\r\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\
    \ .\r\n@prefix skos: <http://www.w3.org/2004/02/skos/core#> .\r\n@prefix xsd:\
    \ <http://www.w3.org/2001/XMLSchema#> .", suggestionAltNameVariable: '?qleverui_alias',
  suggestionEntityVariable: '?qleverui_entity', suggestionNameVariable: '?qleverui_name',
  suggestionReversedVariable: '?qleverui_reversed', supportedFunctions: 'asc, desc,
    avg, values, score, text, count, sample, min, max, average, concat, group_concat,
    langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts,
    strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor,
    round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri,
    isiri, isblank, isliteral, isNumeric, bound', supportedKeywords: 'prefix, select,
    construct, distinct, where, order, limit, offset, optional, by, as, having, not,
    textlimit, contains-entity, contains-word, filter, group, union, optional, has-predicate,
    bind, minus, service, internal, sort, keywords', supportedPredicateSuggestions: 'ql:contains-word,
    ql:contains-entity', warmupQuery1: "SELECT ?qleverui_entity (SAMPLE(?name) AS\
    \ ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\r\n  { SELECT ?qleverui_entity ?name ?alias ?count WHERE {\r\n    %ENTITY_SCORE_PATTERN%\r\
    \n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\r\n  ORDER BY ?qleverui_entity }\r\n}\
    \ GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", warmupQuery2: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} ORDER BY ?alias", warmupQuery3: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} ORDER BY ?qleverui_entity", warmupQuery4: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_1) WHERE { ?x ql:has-predicate ?qleverui_entity\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\
    \ .\r\n    FILTER (?qleverui_entity != <QLever-internal-function/langtag>)\r\n\
    \  } UNION {\r\n    { SELECT ?qleverui_entity (COUNT(?qleverui_entity) AS ?count_1)\
    \ WHERE { ?x ql:has-predicate ?qleverui_entity } GROUP BY ?qleverui_entity }\r\
    \n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT% .\r\n    FILTER\
    \ (?qleverui_entity != <QLever-internal-function/langtag>)\r\n  } }", warmupQuery5: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_1) WHERE { ?x ql:has-predicate ?qleverui_entity\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\
    \ .\r\n    FILTER (?qleverui_entity != <QLever-internal-function/langtag>)\r\n\
    \  } UNION {\r\n    { SELECT ?qleverui_entity (COUNT(?qleverui_entity) AS ?count_1)\
    \ WHERE { ?x ql:has-predicate ?qleverui_entity } GROUP BY ?qleverui_entity }\r\
    \n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT% .\r\n    FILTER\
    \ (?qleverui_entity != <QLever-internal-function/langtag>)\r\n  } }"}
- {alternativeObjectName: '', alternativePredicateName: '', alternativeSubjectName: '',
  apiToken: aof4Ad, baseUrl: 'https://qlever.cs.uni-freiburg.de/api/olympics', defaultModeTimeout: 5.0,
  dynamicSuggestions: 2, entityNameAndAliasPattern: '?qleverui_entity rdfs:label ?name
    . BIND(?name AS ?alias)', entityNameAndAliasPatternDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', entityScorePattern: '{ SELECT ?qleverui_entity
    (COUNT(?predicate) AS ?count) WHERE { ?qleverui_entity ?predicate ?object } GROUP
    BY ?qleverui_entity }', fillPrefixes: '1', filterEntities: '0', filteredLanguage: en,
  frequentPatternsWithoutOrder: '', frequentPredicates: '', id: 39, isDefault: '0',
  isNoSlugMode: '0', mapViewBaseURL: '', maxDefault: 100, mixedModeTimeout: 1.0, name: Olympics,
  objectName: '', predicateName: '', predicateNameAndAliasPatternWithContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', replacePredicates: '', slug: olympics,
  sortKey: Z.9, subjectName: '', suggestObjects: "%PREFIXES%\nSELECT ?qleverui_entity\n\
    \              (MIN(?name) AS ?qleverui_name)\n              (MIN(?alias) AS ?qleverui_alias)\n\
    \              (MAX(?count_1) AS ?qleverui_count) WHERE {\n  {\n\n    { SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qleverui_entity .\n      } GROUP BY ?qleverui_entity }\n\
    \      { %WARMUP_QUERY_3% }\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n\n  } UNION {\n\n    { SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qleverui_entity\n      } GROUP BY ?qleverui_entity }\n\
    \      %ENTITY_NAME_AND_ALIAS_PATTERN_DEFAULT%\n      # IF !CURRENT_WORD_EMPTY\
    \ #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n      # ENDIF #\n \
    \   } }\n\n  }\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", suggestObjectsContextInsensitive: "%PREFIXES%\n\
    # IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity\
    \ (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count)\
    \ AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY\
    \ ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestPredicates: "%PREFIXES%\n\
    # IF !CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n              (MIN(?name)\
    \ as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n       \
    \       (SAMPLE(?count_2) as ?qleverui_count)\n              ?qleverui_reversed\
    \ WHERE {\n\n  { { SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n\
    \    WHERE { %CURRENT_SUBJECT% ?qleverui_entity ?qleverui_tmp  }\n    GROUP BY\
    \ ?qleverui_entity }\n  BIND (0 AS ?qleverui_reversed) }\n  UNION\n  { { SELECT\
    \ ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n    WHERE { ?qleverui_tmp\
    \ ?qleverui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qleverui_entity }\n   \
    \ BIND (1 AS ?qleverui_reversed) }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ?qleverui_reversed ORDER BY DESC(?qleverui_count)\n\n# ENDIF\
    \ #\n# IF CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n\
    \              (MIN(?name) as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n\
    \              (SAMPLE(?count_1) as ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\"\
    , \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\
    \n# ENDIF #\n\n# IF !CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\n\
    SELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n      \
    \        (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_2) as\
    \ ?qleverui_count) WHERE {\n  { SELECT ?qleverui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%)\
    \ AS ?count_2)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qleverui_entity\
    \ ?object }\n    GROUP BY ?qleverui_entity }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestPredicatesContextInsensitive: "%PREFIXES%\n\
    \nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n    \
    \          (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_1) as\
    \ ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", suggestPrefixnamesForPredicates: '1',
  suggestSubjects: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n\
    # ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\"\
    )\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n\
    # ENDIF #", suggestSubjectsContextInsensitive: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY\
    \ #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name)\
    \ AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\
    \n# ENDIF #", suggestedPrefixes: "@prefix olympics: <http://wallscope.co.uk/ontology/olympics/>\
    \ .\r\n@prefix athlete: <http://wallscope.co.uk/resource/olympics/athlete/> .\r\
    \n@prefix medal: <http://wallscope.co.uk/resource/olympics/medal/> .\r\n@prefix\
    \ event: <http://wallscope.co.uk/resource/olympics/event/> .\r\n@prefix games:\
    \ <http://wallscope.co.uk/resource/olympics/games/> .\r\n@prefix season: <http://wallscope.co.uk/resource/olympics/season/>\
    \ .\r\n@prefix dbo: <http://dbpedia.org/ontology/> .\r\n@prefix dbp: <http://dbpedia.org/property/>\
    \ .\r\n@prefix foaf: <http://xmlns.com/foaf/0.1/> .\r\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\
    \ .\r\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\r\n@prefix skos:\
    \ <http://www.w3.org/2004/02/skos/core#> .\r\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#>\
    \ .", suggestionAltNameVariable: '?qleverui_altname', suggestionEntityVariable: '?qleverui_entity',
  suggestionNameVariable: '?qleverui_name', suggestionReversedVariable: '?qleverui_reversed',
  supportedFunctions: 'asc, desc, avg, values, score, text, count, sample, min, max,
    average, concat, group_concat, langMatches, lang, regex, sum, dist, contains,
    str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year,
    month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if,
    coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric,
    bound', supportedKeywords: 'prefix, select, construct, distinct, where, order,
    limit, offset, optional, by, as, having, not, textlimit, contains-entity, contains-word,
    filter, group, union, optional, has-predicate, bind, minus, service, internal,
    sort, keywords, from, named, graph', supportedPredicateSuggestions: 'ql:contains-word,
    ql:contains-entity', warmupQuery1: "SELECT ?qleverui_entity (SAMPLE(?name) AS\
    \ ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\r\n  { SELECT ?qleverui_entity ?name ?alias ?count WHERE {\r\n    %ENTITY_SCORE_PATTERN%\r\
    \n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\r\n  ORDER BY ?qleverui_entity }\r\n}\
    \ GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", warmupQuery2: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?alias", warmupQuery3: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?qleverui_entity", warmupQuery4: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%\r\n  } } }", warmupQuery5: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%\r\n  } } }"}
- {alternativeObjectName: '', alternativePredicateName: '', alternativeSubjectName: '',
  apiToken: aof4Ad, baseUrl: 'https://qlever.cs.uni-freiburg.de/api/uniprot', defaultModeTimeout: 30.0,
  dynamicSuggestions: 2, entityNameAndAliasPattern: 'BIND(?qleverui_entity AS ?name)
    BIND(?qleverui_entity AS ?alias)', entityNameAndAliasPatternDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', entityScorePattern: '{ SELECT ?qleverui_entity
    (COUNT(?predicate) AS ?count) WHERE { ?qleverui_entity ?predicate ?object } GROUP
    BY ?qleverui_entity }', fillPrefixes: '1', filterEntities: '0', filteredLanguage: en,
  frequentPatternsWithoutOrder: 'rdfs:label', frequentPredicates: '', id: 32, isDefault: '0',
  isNoSlugMode: '0', mapViewBaseURL: '', maxDefault: 100, mixedModeTimeout: 1.0, name: UniProt,
  objectName: '?qleverui_entity up:scientificName ?qleverui_name', predicateName: '',
  predicateNameAndAliasPatternWithContext: 'BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity
    AS ?alias)', predicateNameAndAliasPatternWithContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', replacePredicates: '', slug: uniprot,
  sortKey: B.4, subjectName: '?qleverui_entity up:scientificName ?qleverui_name',
  suggestObjects: "%PREFIXES%\nSELECT ?qui_entity (MIN(?name) AS ?qui_name) (MIN(?alias)\
    \ AS ?qui_alias) (MAX(?count) AS ?qui_count) WHERE {\n  {\n    { SELECT ?qui_entity\
    \ ?name ?alias ?count WHERE {\n      { SELECT ?qui_entity (COUNT(?qui_entity)\
    \ AS ?count) WHERE {\n        # %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE%\
    \ ?qui_entity .\n        %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity\n \
    \     } GROUP BY ?qui_entity }\n      ?qui_entity rdfs:label ?name BIND(?name\
    \ AS ?alias)\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n  } UNION {\n   { SELECT ?qui_entity\
    \ ?name ?alias ?count WHERE {\n      { SELECT ?qui_entity (COUNT(?qui_entity)\
    \ AS ?count) WHERE {\n        # %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE%\
    \ ?qui_entity .\n        %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity\n \
    \     } GROUP BY ?qui_entity }\n      ?qui_entity up:scientificName ?name BIND(?name\
    \ AS ?alias)\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n  } UNION {\n    { SELECT ?qui_entity\
    \ ?name ?alias ?count WHERE {\n      { SELECT ?qui_entity (COUNT(?qui_entity)\
    \ AS ?count) WHERE {\n        # %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE%\
    \ ?qui_entity .\n        %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity\n \
    \     } GROUP BY ?qui_entity }\n      BIND(?qui_entity AS ?name) BIND(?qui_entity\
    \ AS ?alias)\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n  }\n} GROUP BY ?qui_entity\
    \ ORDER BY DESC(?qui_count)", suggestObjectsContextInsensitive: "%PREFIXES%\n\
    SELECT ?qui_entity (MIN(?name) AS ?qui_name) (MIN(?alias) AS ?qui_alias) (MAX(?count)\
    \ AS ?qui_count) WHERE {\n  {\n    { SELECT ?qui_entity ?name ?alias ?count WHERE\
    \ {\n      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n     \
    \   %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity\n      } GROUP BY ?qui_entity\
    \ }\n      ?qui_entity rdfs:label ?name BIND(?name AS ?alias)\n      # IF !CURRENT_WORD_EMPTY\
    \ #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n      # ENDIF #\n \
    \   } }\n  } UNION {\n   { SELECT ?qui_entity ?name ?alias ?count WHERE {\n  \
    \    { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n        %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qui_entity\n      } GROUP BY ?qui_entity }\n      ?qui_entity\
    \ up:scientificName ?name BIND(?name AS ?alias)\n      # IF !CURRENT_WORD_EMPTY\
    \ #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n      # ENDIF #\n \
    \   } }\n  } UNION {\n    { SELECT ?qui_entity ?name ?alias ?count WHERE {\n \
    \     { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n        %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qui_entity\n      } GROUP BY ?qui_entity }\n      BIND(?qui_entity\
    \ AS ?name) BIND(?qui_entity AS ?alias)\n      # IF !CURRENT_WORD_EMPTY #\n  \
    \    FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n\
    \  }\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)", suggestPredicates: "%PREFIXES%\n\
    # IF !CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qui_entity (MIN(?name) as ?qui_name)\
    \ (MIN(?alias) as ?qui_alias) (SAMPLE(?count_2) as ?qui_count) ?qui_reversed WHERE\
    \ {\n  { { SELECT ?qui_entity (COUNT(?qui_tmp) AS ?count_2)\n    WHERE { %CURRENT_SUBJECT%\
    \ ?qui_entity ?qui_tmp  }\n    GROUP BY ?qui_entity }\n  BIND (0 AS ?qui_reversed)\
    \ }\n  UNION\n  { { SELECT ?qui_entity (COUNT(?qui_tmp) AS ?count_2)\n    WHERE\
    \ { ?qui_tmp ?qui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qui_entity }\n  \
    \  BIND (1 AS ?qui_reversed) }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?qui_entity), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n\
    } GROUP BY ?qui_entity ?qui_reversed ORDER BY DESC(?qui_count)\n\n# ENDIF #\n\
    # IF CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qui_entity\
    \ (?qui_entity AS ?qui_name) (?qui_entity AS ?qui_alias) (?count AS ?qui_count)\
    \ WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE { ?qui_subject\
    \ ?qui_entity ?qui_object } GROUP BY ?qui_entity }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?qui_entity), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n\
    } ORDER BY DESC(?qui_count)\n\n# ENDIF #\n\n# IF !CONNECTED_TRIPLES_EMPTY AND\
    \ CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qui_entity (?qui_entity AS ?qui_name)\
    \ (?qui_entity AS ?qui_alias) (?count AS ?qui_count) WHERE {\n  { SELECT ?qui_entity\
    \ (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?count)\n    WHERE { %CONNECTED_TRIPLES%\
    \ %CURRENT_SUBJECT% ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  #\
    \ IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_entity), \"%CURRENT_WORD%\"\
    , \"i\")\n  # ENDIF #\n} ORDER BY DESC(?qui_count)\n\n# ENDIF #", suggestPredicatesContextInsensitive: "%PREFIXES%\n\
    \nSELECT ?qui_entity (?qui_entity AS ?qui_name) (?qui_entity AS ?qui_alias) (?count\
    \ AS ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count)\
    \ WHERE { ?qui_subject ?qui_entity ?qui_object } GROUP BY ?qui_entity }\n  # IF\
    \ !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_entity), \"%CURRENT_WORD%\",\
    \ \"i\")\n  # ENDIF #\n} ORDER BY DESC(?qleverui_count)", suggestPrefixnamesForPredicates: '1',
  suggestSubjects: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n# ELSE #\n\nSELECT ?qleverui_entity\
    \ (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count)\
    \ AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY\
    \ ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestSubjectsContextInsensitive: "%PREFIXES%\n\
    # IF CURRENT_WORD_EMPTY #\n\n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name)\
    \ AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\
    \n# ENDIF #", suggestedPrefixes: "@prefix annotation: <http://purl.uniprot.org/annotation/>\
    \ .\r\n@prefix bibo:  <http://purl.org/ontology/bibo/> .\r\n@prefix busco: <http://busco.ezlab.org/schema#>\
    \ .\r\n@prefix chebi: <http://purl.obolibrary.org/obo/CHEBI_> .\r\n@prefix citation:\
    \ <http://purl.uniprot.org/citations/> .\r\n@prefix cito:  <http://purl.org/spar/cito/>\
    \ .\r\n@prefix dcat:  <http://www.w3.org/ns/dcat#> .\r\n@prefix dcmit: <http://purl.org/dc/dcmitype/>\
    \ .\r\n@prefix dcterms: <http://purl.org/dc/terms/> .\r\n@prefix disease: <http://purl.uniprot.org/diseases/>\
    \ .\r\n@prefix ECO:   <http://purl.obolibrary.org/obo/ECO_> .\r\n@prefix embl-cds:\
    \ <http://purl.uniprot.org/embl-cds/> .\r\n@prefix ensembl: <http://rdf.ebi.ac.uk/resource/ensembl/>\
    \ .\r\n@prefix enzyme: <http://purl.uniprot.org/enzyme/> .\r\n@prefix faldo: <http://biohackathon.org/resource/faldo#>\
    \ .\r\n@prefix foaf:  <http://xmlns.com/foaf/0.1/> .\r\n@prefix go:    <http://purl.obolibrary.org/obo/GO_>\
    \ .\r\n@prefix hs:    <https://hamap.expasy.org/rdf/vocab#> .\r\n@prefix isoform:\
    \ <http://purl.uniprot.org/isoforms/> .\r\n@prefix keywords: <http://purl.uniprot.org/keywords/>\
    \ .\r\n@prefix location: <http://purl.uniprot.org/locations/> .\r\n@prefix obo:\
    \   <http://purl.obolibrary.org/obo/> .\r\n@prefix oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\
    \ .\r\n@prefix owl:   <http://www.w3.org/2002/07/owl#> .\r\n@prefix patent: <http://purl.uniprot.org/EPO/>\
    \ .\r\n@prefix pav:   <http://purl.org/pav/> .\r\n@prefix position: <http://purl.uniprot.org/position/>\
    \ .\r\n@prefix prism: <http://prismstandard.org/namespaces/basic/2.0/> .\r\n@prefix\
    \ pubmed: <http://purl.uniprot.org/pubmed/> .\r\n@prefix range: <http://purl.uniprot.org/range/>\
    \ .\r\n@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\r\n@prefix\
    \ rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .\r\n@prefix rh:    <http://rdf.rhea-db.org/>\
    \ .\r\n@prefix schema: <http://schema.org/> .\r\n@prefix sd:    <http://www.w3.org/ns/sparql-service-description#>\
    \ .\r\n@prefix sh:    <http://www.w3.org/ns/shacl#> .\r\n@prefix skos:  <http://www.w3.org/2004/02/skos/core#>\
    \ .\r\n@prefix sp:    <http://spinrdf.org/sp#> .\r\n@prefix ssmRegion: <http://purl.uniprot.org/signatureSequenceMatch/>\
    \ .\r\n@prefix stato: <http://purl.obolibrary.org/obo/STATO_> .\r\n@prefix taxon:\
    \ <http://purl.uniprot.org/taxonomy/> .\r\n@prefix tissue: <http://purl.uniprot.org/tissues/>\
    \ .\r\n@prefix uniparc: <http://purl.uniprot.org/uniparc/> .\r\n@prefix uniprot:\
    \ <http://purl.uniprot.org/uniprot/> .\r\n@prefix up:    <http://purl.uniprot.org/core/>\
    \ .\r\n@prefix voag:  <http://voag.linkedmodel.org/schema/voag#> .\r\n@prefix\
    \ void:  <http://rdfs.org/ns/void#> .\r\n@prefix xsd:   <http://www.w3.org/2001/XMLSchema#>\
    \ .", suggestionAltNameVariable: '?qui_alias', suggestionEntityVariable: '?qui_entity',
  suggestionNameVariable: '?qui_name', suggestionReversedVariable: '?qui_reversed',
  supportedFunctions: 'asc, desc, avg, values, score, text, count, sample, min, max,
    average, concat, group_concat, langMatches, lang, regex, sum, dist, contains,
    str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year,
    month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if,
    coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric,
    bound', supportedKeywords: 'prefix, select, construct, distinct, where, order,
    limit, offset, optional, by, as, having, not, textlimit, contains-entity, contains-word,
    filter, group, union, optional, has-predicate, bind, minus, service, internal,
    sort, keywords', supportedPredicateSuggestions: 'ql:contains-word, ql:contains-entity',
  warmupQuery1: "SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\r\n  { SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n    %ENTITY_SCORE_PATTERN%\r\
    \n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\r\n  ORDER BY ?qleverui_entity }\r\n}\
    \ GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", warmupQuery2: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?alias", warmupQuery3: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?qleverui_entity", warmupQuery4: "SELECT\
    \ ?qui_entity ?name ?alias ?count WHERE {\r\n  { SELECT ?qui_entity (COUNT(?qui_entity)\
    \ AS ?count) WHERE { ?qui_subject ?qui_entity ?qui_object } GROUP BY ?qui_entity\
    \ }\r\n  BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)\r\n}",
  warmupQuery5: "SELECT ?qui_entity ?name ?alias ?count WHERE {\r\n  { SELECT ?qui_entity\
    \ (COUNT(?qui_entity) AS ?count) WHERE { ?qui_subject ?qui_entity ?qui_object\
    \ } GROUP BY ?qui_entity }\r\n  BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity\
    \ AS ?alias)\r\n}"}
- {alternativeObjectName: '', alternativePredicateName: '', alternativeSubjectName: '',
  apiToken: '', baseUrl: 'https://qlever.cs.uni-freiburg.de/api/pubchem', defaultModeTimeout: 5.0,
  dynamicSuggestions: 2, entityNameAndAliasPattern: "{ { ?qleverui_entity rdf:type\
    \ ?qleverui_type . ?qleverui_type obo:IAO_0000412 obo:chebi.owl . ?qleverui_type\
    \ rdfs:label ?name } UNION { ?qleverui_entity rdfs:label ?name } BIND(?name AS\
    \ ?alias) }\r\nUNION\r\n{ { ?qleverui_entity rdf:type ?qleverui_type . ?qleverui_type\
    \ obo:IAO_0000412 obo:chebi.owl . ?qleverui_type rdfs:label ?name } UNION { ?qleverui_entity\
    \ rdfs:label ?name } ?qleverui_entity sio:SIO_000008 ?qleverui_synonym . ?qleverui_synonym\
    \ rdf:type sio:CHEMINF_000339 . ?qleverui_synonym sio:SIO_000300 ?alias }", entityNameAndAliasPatternDefault: 'BIND(STR(?qleverui_entity)
    AS ?name) BIND(?name AS ?alias)', entityScorePattern: "{ SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_synonym) AS ?count) WHERE {\r\n  { ?qleverui_entity sio:SIO_000008\
    \ ?qleverui_synonym . ?qleverui_synonym rdf:type sio:CHEMINF_000339 }\r\n  UNION\r\
    \n  { ?qleverui_entity rdfs:label ?qleverui_synonym }\r\n} GROUP BY ?qleverui_entity\
    \ }", fillPrefixes: '1', filterEntities: '0', filteredLanguage: en, frequentPatternsWithoutOrder: '',
  frequentPredicates: '#rdfs:label #dcterms:title', id: 31, isDefault: '0', isNoSlugMode: '0',
  mapViewBaseURL: '', maxDefault: 100, mixedModeTimeout: 3.0, name: PubChem, objectName: '?qleverui_entity
    <http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name .', predicateName: '?qleverui_entity
    <http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name .', predicateNameAndAliasPatternWithContext: '?qleverui_entity
    rdfs:label ?name . BIND(?name AS ?alias)', predicateNameAndAliasPatternWithContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContext: '?qleverui_entity
    rdfs:label ?name . BIND(?name AS ?alias)', predicateNameAndAliasPatternWithoutContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?name AS ?alias)', replacePredicates: '', slug: pubchem, sortKey: B.5,
  subjectName: '?qleverui_entity <http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name
    .', suggestObjects: "%PREFIXES%\nSELECT ?qui_entity ?qui_name ?qui_alias ?qui_count\
    \ WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count) WHERE {\n\
    \    %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n\
    \  } GROUP BY ?qui_entity }\n  OPTIONAL { ?qui_entity rdf:type [ obo:IAO_0000412\
    \ obo:chebi.owl; rdfs:label ?qui_name_or_null ] }\n  OPTIONAL { ?qui_entity rdfs:label\
    \ ?qui_name_or_null }\n  BIND (IF(?qui_name_or_null, ?qui_name_or_null, ?qui_entity)\
    \ AS ?qui_name)\n  BIND (?qui_name AS ?qui_alias)\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?qui_name), \"^%CURRENT_WORD%\")\n  # ENDIF #\n} ORDER\
    \ BY DESC(?qui_count)", suggestObjectsContextInsensitive: "%PREFIXES%\nSELECT\
    \ ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity\
    \ (COUNT(?qui_entity) AS ?qui_count) WHERE {\n    %CURRENT_SUBJECT% %CURRENT_PREDICATE%\
    \ ?qui_entity .\n  } GROUP BY ?qui_entity }\n  OPTIONAL { ?qui_entity rdf:type\
    \ [ obo:IAO_0000412 obo:chebi.owl; rdfs:label ?qui_name_or_null ] }\n  OPTIONAL\
    \ { ?qui_entity rdfs:label ?qui_name_or_null }\n  BIND (IF(?qui_name_or_null,\
    \ ?qui_name_or_null, ?qui_entity) AS ?qui_name)\n  BIND (?qui_name AS ?qui_alias)\n\
    \  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_name), \"^%CURRENT_WORD%\"\
    )\n  # ENDIF #\n} ORDER BY DESC(?qui_count)", suggestPredicates: "%PREFIXES%\n\
    # IF !CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qui_entity (SAMPLE(?qui_name_) AS\
    \ ?qui_name) (SAMPLE(?qui_alias_) AS ?qui_alias) ?qui_count ?qui_reversed WHERE\
    \ {\n  { { SELECT ?qui_entity (COUNT(?qui_object) AS ?qui_count)\n    WHERE {\
    \ %CURRENT_SUBJECT% ?qui_entity ?qui_object  }\n    GROUP BY ?qui_entity } BIND\
    \ (0 AS ?qui_reversed) }\n  UNION\n  { { SELECT ?qui_entity (COUNT(?qui_subject)\
    \ AS ?qui_count)\n    WHERE { ?qui_subject ?qui_entity %CURRENT_SUBJECT%  }\n\
    \    GROUP BY ?qui_entity } BIND (1 AS ?qui_reversed) }\n  OPTIONAL { ?qui_entity\
    \ rdfs:label ?qui_name_or_null }\n  BIND (IF(?qui_name_or_null, ?qui_name_or_null,\
    \ ?qui_entity) AS ?qui_name_)\n  BIND (?qui_name_ AS ?qui_alias_)\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?qui_alias_), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n\
    } GROUP BY ?qui_entity ?qui_count ?qui_reversed ORDER BY DESC(?qui_count)\n\n\
    # ENDIF #\n# IF CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qui_entity (SAMPLE(?qui_name_)\
    \ AS ?qui_name) (SAMPLE(?qui_alias_) AS ?qui_alias) ?qui_count WHERE {\n  # IF\
    \ CONNECTED_TRIPLES_EMPTY #\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count)\n\
    \    WHERE { ?qui_subject ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity\
    \ }\n  # ELSE #\n  { SELECT ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS\
    \ ?qui_count)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qui_entity ?qui_object\
    \ }\n    GROUP BY ?qui_entity }\n  # ENDIF #\n  OPTIONAL { ?qui_entity rdfs:label\
    \ ?qui_name_or_null }\n  BIND (IF(?qui_name_or_null, ?qui_name_or_null, ?qui_entity)\
    \ AS ?qui_name_)\n  BIND (?qui_name_ AS ?qui_alias_)\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?qui_alias_), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n\
    } GROUP BY ?qui_entity ?qui_count ORDER BY DESC(?qui_count)\n\n# ENDIF #", suggestPredicatesContextInsensitive: "%PREFIXES%\n\
    SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity\
    \ (COUNT(?qui_entity) AS ?qui_count)\n    WHERE { ?qui_subject ?qui_entity ?qui_object\
    \ }\n    GROUP BY ?qui_entity }\n  OPTIONAL { ?qui_entity rdfs:label ?qui_name_or_null\
    \ }\n  BIND (IF(?qui_name_or_null, ?qui_name_or_null, ?qui_entity) AS ?qui_name)\n\
    \  BIND (?qui_name AS ?qui_alias)\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_alias),\
    \ \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} ORDER BY DESC(?qui_count)", suggestPrefixnamesForPredicates: '1',
  suggestSubjects: "%PREFIXES%\n# IF !CURRENT_WORD_EMPTY #\n\nSELECT ?qui_entity ?qui_name\
    \ ?qui_alias WHERE {\n  ?qui_entity rdf:type [ obo:IAO_0000412 obo:chebi.owl;\
    \ rdfs:label ?qui_name ]\n  BIND (?qui_name AS ?qui_alias)\n  FILTER REGEX(STR(?qui_name),\
    \ \"^%CURRENT_WORD%\")\n} ORDER BY ASC(?qui_name)\n\n# ENDIF #", suggestSubjectsContextInsensitive: "%PREFIXES%\n\
    # IF !CURRENT_WORD_EMPTY #\n\nSELECT ?qui_entity ?qui_name ?qui_alias WHERE {\n\
    \  ?qui_entity rdf:type [ obo:IAO_0000412 obo:chebi.owl; rdfs:label ?qui_name\
    \ ]\n  BIND (?qui_name AS ?qui_alias)\n  FILTER REGEX(STR(?qui_name), \"^%CURRENT_WORD%\"\
    )\n} ORDER BY ASC(?qui_name)\n\n# ENDIF #", suggestedPrefixes: "@prefix bao: <http://www.bioassayontology.org/bao#>\
    \ .\r\n@prefix bioassay: <http://rdf.ncbi.nlm.nih.gov/pubchem/bioassay/> .\r\n\
    @prefix bp: <http://www.biopax.org/release/biopax-level3.owl#> .\r\n@prefix chemblchembl:\
    \ <http://linkedchemistry.info/chembl/chemblid/> .\r\n@prefix chembl: <http://rdf.ebi.ac.uk/resource/chembl/molecule/>\
    \ .\r\n@prefix cell: <http://rdf.ncbi.nlm.nih.gov/pubchem/cell/> .\r\n@prefix\
    \ cito: <http://purl.org/spar/cito/> .\r\n@prefix compound: <http://rdf.ncbi.nlm.nih.gov/pubchem/compound/>\
    \ .\r\n@prefix concept: <http://rdf.ncbi.nlm.nih.gov/pubchem/concept/> .\r\n@prefix\
    \ conserveddomain: <http://rdf.ncbi.nlm.nih.gov/pubchem/conserveddomain/> .\r\n\
    @prefix dcterms: <http://purl.org/dc/terms/> .\r\n@prefix descriptor: <http://rdf.ncbi.nlm.nih.gov/pubchem/descriptor/>\
    \ .\r\n@prefix disease: <http://rdf.ncbi.nlm.nih.gov/pubchem/disease/> .\r\n@prefix\
    \ endpoint: <http://rdf.ncbi.nlm.nih.gov/pubchem/endpoint/> .\r\n@prefix ensembl:\
    \ <http://rdf.ebi.ac.uk/resource/ensembl/> .\r\n@prefix fabio: <http://purl.org/spar/fabio/>\
    \ .\r\n@prefix foaf: <http://xmlns.com/foaf/0.1/> .\r\n@prefix freq: <http://purl.org/cld/freq/>\
    \ .\r\n@prefix gene: <http://rdf.ncbi.nlm.nih.gov/pubchem/gene/> .\r\n@prefix\
    \ : <http://rdf.ncbi.nlm.nih.gov/pubchem/void.ttl#> .\r\n@prefix inchikey: <http://rdf.ncbi.nlm.nih.gov/pubchem/inchikey/>\
    \ .\r\n@prefix measuregroup: <http://rdf.ncbi.nlm.nih.gov/pubchem/measuregroup/>\
    \ .\r\n@prefix mesh: <http://id.nlm.nih.gov/mesh/> .\r\n@prefix nci: <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#>\
    \ .\r\n@prefix ns0: <http://data.epo.org/linked-data/def/patent/> .\r\n@prefix\
    \ obo: <http://purl.obolibrary.org/obo/> .\r\n@prefix owl: <http://www.w3.org/2002/07/owl#>\
    \ .\r\n@prefix patentcpc: <http://rdf.ncbi.nlm.nih.gov/pubchem/patentcpc/> .\r\
    \n@prefix patent: <http://rdf.ncbi.nlm.nih.gov/pubchem/patent/> .\r\n@prefix patentipc:\
    \ <http://rdf.ncbi.nlm.nih.gov/pubchem/patentipc/> .\r\n@prefix pathway: <http://rdf.ncbi.nlm.nih.gov/pubchem/pathway/>\
    \ .\r\n@prefix pav: <http://purl.org/pav/> .\r\n@prefix pav: <http://purl.org/pav/2.0/>\
    \ .\r\n@prefix pdbo: <http://rdf.wwpdb.org/schema/pdbx-v40.owl#> .\r\n@prefix\
    \ protein: <http://rdf.ncbi.nlm.nih.gov/pubchem/protein/> .\r\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\
    \ .\r\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\r\n@prefix reactome:\
    \ <http://identifiers.org/reactome/> .\r\n@prefix reference: <http://rdf.ncbi.nlm.nih.gov/pubchem/reference/>\
    \ .\r\n@prefix sio: <http://semanticscience.org/resource/> .\r\n@prefix skos:\
    \ <http://www.w3.org/2004/02/skos/core#> .\r\n@prefix source: <http://rdf.ncbi.nlm.nih.gov/pubchem/source/>\
    \ .\r\n@prefix substance: <http://rdf.ncbi.nlm.nih.gov/pubchem/substance/> .\r\
    \n@prefix synonym: <http://rdf.ncbi.nlm.nih.gov/pubchem/synonym/> .\r\n@prefix\
    \ taxonomy: <http://rdf.ncbi.nlm.nih.gov/pubchem/taxonomy> .\r\n@prefix uniprot:\
    \ <http://purl.uniprot.org/uniprot/> .\r\n@prefix up: <http://purl.uniprot.org/core/>\
    \ .\r\n@prefix vcard2006: <http://www.w3.org/2006/vcard/ns#> .\r\n@prefix voag:\
    \ <http://voag.linkedmodel.org/schema/voag#> .\r\n@prefix vocab: <http://rdf.ncbi.nlm.nih.gov/pubchem/vocabulary#>\
    \ .\r\n@prefix void: <http://rdfs.org/ns/void#> .\r\n@prefix wikidata: <http://www.wikidata.org/entity/>\
    \ .\r\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .", suggestionAltNameVariable: '?qui_alias',
  suggestionEntityVariable: '?qui_entity', suggestionNameVariable: '?qui_name', suggestionReversedVariable: '?qui_reversed',
  supportedFunctions: 'asc, desc, avg, values, score, text, count, sample, min, max,
    average, concat, group_concat, langMatches, lang, regex, sum, dist, contains,
    str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year,
    month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if,
    coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric,
    bound, from, named, graph', supportedKeywords: 'prefix, select, construct, distinct,
    where, order, limit, offset, optional, by, as, having, not, textlimit, contains-entity,
    contains-word, filter, group, union, optional, has-predicate, bind, minus, service,
    internal, sort, keywords', supportedPredicateSuggestions: 'ql:contains-word, ql:contains-entity',
  warmupQuery1: "SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\r\n  { SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n    %ENTITY_SCORE_PATTERN%\r\
    \n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\r\n  ORDER BY ?qleverui_entity }\r\n}\
    \ GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", warmupQuery2: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?alias", warmupQuery3: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?qleverui_entity", warmupQuery4: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n  OPTIONAL { %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\
    \ }\r\n  OPTIONAL {\r\n    { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject)\
    \ AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity\
    \ }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT% }\r\n}", warmupQuery5: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n  OPTIONAL { %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\
    \ }\r\n  OPTIONAL {\r\n    { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject)\
    \ AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity\
    \ }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT% }\r\n}"}
- {alternativeObjectName: '', alternativePredicateName: '', alternativeSubjectName: '',
  apiToken: aof4Ad, baseUrl: 'https://qlever.cs.uni-freiburg.de/api/yago-4', defaultModeTimeout: 5.0,
  dynamicSuggestions: 3, entityNameAndAliasPattern: '?qleverui_entity @en@rdfs:label
    ?name . ?qleverui_entity @en@rdfs:label|@en@schema:alternateName ?alias .', entityNameAndAliasPatternDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', entityScorePattern: '{ { SELECT ?qleverui_entity
    (COUNT(?qleverui_tmp) AS ?count) WHERE { ?qleverui_entity @en@rdfs:label ?qleverui_tmp_2
    . ?qleverui_entity schema:sameAs ?qleverui_tmp } GROUP BY ?qleverui_entity } }
    UNION { { SELECT ?qleverui_entity ?count WHERE { ?qleverui_entity @en@rdfs:label
    ?qleverui_tmp_2 . MINUS { ?qleverui_entity schema:sameAs ?qleverui_tmp_3 } BIND(1
    AS ?count) } } }', fillPrefixes: '1', filterEntities: '0', filteredLanguage: en,
  frequentPatternsWithoutOrder: '', frequentPredicates: 'rdf:type @en@rdfs:label @en@schema:alternateName
    schema:sameAs', id: 26, isDefault: '0', isNoSlugMode: '0', mapViewBaseURL: '',
  maxDefault: 100, mixedModeTimeout: 2.0, name: Yago 4, objectName: '', predicateName: '',
  predicateNameAndAliasPatternWithContext: 'BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity
    AS ?alias)', predicateNameAndAliasPatternWithContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', replacePredicates: '', slug: yago-4,
  sortKey: Z.2, subjectName: '', suggestObjects: "%PREFIXES%\nSELECT ?qleverui_entity\n\
    \              (MIN(?name) AS ?qleverui_name)\n              (MIN(?alias) AS ?qleverui_alias)\n\
    \              (MAX(?count_1) AS ?qleverui_count) WHERE {\n  {\n\n    { SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qleverui_entity .\n      } GROUP BY ?qleverui_entity }\n\
    \      { %WARMUP_QUERY_3% }\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n\n  } UNION {\n\n    { SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qleverui_entity\n      } GROUP BY ?qleverui_entity }\n\
    \      %ENTITY_NAME_AND_ALIAS_PATTERN_DEFAULT%\n      # IF !CURRENT_WORD_EMPTY\
    \ #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n      # ENDIF #\n \
    \   } }\n\n  }\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", suggestObjectsContextInsensitive: "%PREFIXES%\n\
    # IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity\
    \ (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count)\
    \ AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY\
    \ ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestPredicates: "%PREFIXES%\n\
    # IF !CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n              (MIN(?name)\
    \ as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n       \
    \       (SAMPLE(?count_2) as ?qleverui_count)\n              ?qleverui_reversed\
    \ WHERE {\n\n  { { SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n\
    \    WHERE { %CURRENT_SUBJECT% ?qleverui_entity ?qleverui_tmp  }\n    GROUP BY\
    \ ?qleverui_entity }\n  BIND (0 AS ?qleverui_reversed) }\n  UNION\n  { { SELECT\
    \ ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n    WHERE { ?qleverui_tmp\
    \ ?qleverui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qleverui_entity }\n   \
    \ BIND (1 AS ?qleverui_reversed) }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ?qleverui_reversed ORDER BY DESC(?qleverui_count)\n\n# ENDIF\
    \ #\n# IF CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n\
    \              (MIN(?name) as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n\
    \              (SAMPLE(?count_1) as ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\"\
    , \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\
    \n# ENDIF #\n\n# IF !CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\n\
    SELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n      \
    \        (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_2) as\
    \ ?qleverui_count) WHERE {\n  { SELECT ?qleverui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%)\
    \ AS ?count_2)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qleverui_entity\
    \ ?object }\n    GROUP BY ?qleverui_entity }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestPredicatesContextInsensitive: "%PREFIXES%\n\
    \nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n    \
    \          (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_1) as\
    \ ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", suggestPrefixnamesForPredicates: '1',
  suggestSubjects: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n\
    # ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\"\
    )\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n\
    # ENDIF #", suggestSubjectsContextInsensitive: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY\
    \ #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name)\
    \ AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\
    \n# ENDIF #", suggestedPrefixes: "PREFIX yago: <http://yago-knowledge.org/resource/>\r\
    \nPREFIX schema: <http://schema.org/>\r\nPREFIX bioschemas: <http://bioschemas.org/>\r\
    \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\
    \nPREFIX shacl: <http://www.w3.org/ns/shacl#>\r\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\r\
    \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>", suggestionAltNameVariable: '?qleverui_alias',
  suggestionEntityVariable: '?qleverui_entity', suggestionNameVariable: '?qleverui_name',
  suggestionReversedVariable: '?qleverui_reversed', supportedFunctions: 'asc, desc,
    avg, values, score, text, count, sample, min, max, average, concat, group_concat,
    langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts,
    strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor,
    round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri,
    isiri, isblank, isliteral, isNumeric, bound', supportedKeywords: 'prefix, select,
    construct, distinct, where, order, limit, offset, optional, by, as, having, not,
    textlimit, contains-entity, contains-word, filter, group, union, optional, has-predicate,
    bind, minus, service, internal, sort, keywords', supportedPredicateSuggestions: 'ql:contains-word,
    ql:contains-entity', warmupQuery1: "SELECT ?qleverui_entity (SAMPLE(?name) AS\
    \ ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\r\n  { SELECT ?qleverui_entity ?name ?alias ?count WHERE {\r\n    %ENTITY_SCORE_PATTERN%\r\
    \n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\r\n  ORDER BY ?qleverui_entity }\r\n}\
    \ GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", warmupQuery2: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?alias", warmupQuery3: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?qleverui_entity", warmupQuery4: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%\r\n  } } }", warmupQuery5: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%\r\n  } } }"}
- {alternativeObjectName: '', alternativePredicateName: '', alternativeSubjectName: '',
  apiToken: '', baseUrl: 'https://qlever.cs.uni-freiburg.de/api/dbpedia', defaultModeTimeout: 5.0,
  dynamicSuggestions: 2, entityNameAndAliasPattern: '?qleverui_entity @en@rdfs:label
    ?name . ?qleverui_entity @en@rdfs:label ?alias', entityNameAndAliasPatternDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', entityScorePattern: '{ SELECT ?qleverui_entity
    (MAX(?length) AS ?count) WHERE { ?qleverui_entity dbo:wikiPageLength ?length }
    GROUP BY ?qleverui_entity }', fillPrefixes: '1', filterEntities: '0', filteredLanguage: en,
  frequentPatternsWithoutOrder: '', frequentPredicates: '', id: 25, isDefault: '0',
  isNoSlugMode: '0', mapViewBaseURL: '', maxDefault: 100, mixedModeTimeout: 1.0, name: DBpedia,
  objectName: '', predicateName: '', predicateNameAndAliasPatternWithContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', replacePredicates: '', slug: dbpedia,
  sortKey: Z.3, subjectName: '', suggestObjects: "%PREFIXES%\nSELECT ?qleverui_entity\n\
    \              (MIN(?name) AS ?qleverui_name)\n              (MIN(?alias) AS ?qleverui_alias)\n\
    \              (MAX(?count_1) AS ?qleverui_count) WHERE {\n  {\n\n    { SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qleverui_entity .\n      } GROUP BY ?qleverui_entity }\n\
    \      { %WARMUP_QUERY_3% }\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n\n  } UNION {\n\n    { SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qleverui_entity\n      } GROUP BY ?qleverui_entity }\n\
    \      %ENTITY_NAME_AND_ALIAS_PATTERN_DEFAULT%\n      # IF !CURRENT_WORD_EMPTY\
    \ #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n      # ENDIF #\n \
    \   } }\n\n  }\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", suggestObjectsContextInsensitive: "%PREFIXES%\n\
    # IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity\
    \ (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count)\
    \ AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY\
    \ ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestPredicates: "%PREFIXES%\n\
    # IF !CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n              (MIN(?name)\
    \ as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n       \
    \       (SAMPLE(?count_2) as ?qleverui_count)\n              ?qleverui_reversed\
    \ WHERE {\n\n  { { SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n\
    \    WHERE { %CURRENT_SUBJECT% ?qleverui_entity ?qleverui_tmp  }\n    GROUP BY\
    \ ?qleverui_entity }\n  BIND (0 AS ?qleverui_reversed) }\n  UNION\n  { { SELECT\
    \ ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n    WHERE { ?qleverui_tmp\
    \ ?qleverui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qleverui_entity }\n   \
    \ BIND (1 AS ?qleverui_reversed) }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ?qleverui_reversed ORDER BY DESC(?qleverui_count)\n\n# ENDIF\
    \ #\n# IF CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n\
    \              (MIN(?name) as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n\
    \              (SAMPLE(?count_1) as ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\"\
    , \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\
    \n# ENDIF #\n\n# IF !CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\n\
    SELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n      \
    \        (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_2) as\
    \ ?qleverui_count) WHERE {\n  { SELECT ?qleverui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%)\
    \ AS ?count_2)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qleverui_entity\
    \ ?object }\n    GROUP BY ?qleverui_entity }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestPredicatesContextInsensitive: "%PREFIXES%\n\
    \nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n    \
    \          (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_1) as\
    \ ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", suggestPrefixnamesForPredicates: '1',
  suggestSubjects: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n\
    # ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\"\
    )\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n\
    # ENDIF #", suggestSubjectsContextInsensitive: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY\
    \ #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name)\
    \ AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\
    \n# ENDIF #", suggestedPrefixes: "PREFIX dbr: <http://dbpedia.org/resource/>\r\
    \nPREFIX dbo: <http://dbpedia.org/ontology/>\r\nPREFIX dbp: <http://dbpedia.org/property/>\r\
    \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\
    \nPREFIX dc: <http://purl.org/dc/terms/>\r\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\r\
    \nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\r\nPREFIX prov: <http://www.w3.org/ns/prov#>\r\
    \nPREFIX purl: <http://purl.org/linguistics/gold/>\r\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\r\
    \nPREFIX schema: <http://schema.org/>", suggestionAltNameVariable: '?qleverui_altname',
  suggestionEntityVariable: '?qleverui_entity', suggestionNameVariable: '?qleverui_name',
  suggestionReversedVariable: '?qleverui_reversed', supportedFunctions: 'asc, desc,
    avg, values, score, text, count, sample, min, max, average, concat, group_concat,
    langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts,
    strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor,
    round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri,
    isiri, isblank, isliteral, isNumeric, bound', supportedKeywords: 'prefix, select,
    construct, distinct, where, order, limit, offset, optional, by, as, having, not,
    textlimit, contains-entity, contains-word, filter, group, union, optional, has-predicate,
    bind, minus, service, internal, sort, keywords', supportedPredicateSuggestions: 'ql:contains-word,
    ql:contains-entity', warmupQuery1: "SELECT ?qleverui_entity (SAMPLE(?name) AS\
    \ ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\r\n  { SELECT ?qleverui_entity ?name ?alias ?count WHERE {\r\n    %ENTITY_SCORE_PATTERN%\r\
    \n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\r\n  ORDER BY ?qleverui_entity }\r\n}\
    \ GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", warmupQuery2: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?alias", warmupQuery3: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?qleverui_entity", warmupQuery4: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%\r\n  } } }", warmupQuery5: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%\r\n  } } }"}
- {alternativeObjectName: '', alternativePredicateName: '', alternativeSubjectName: '',
  apiToken: aof4Ad, baseUrl: 'https://qlever.cs.uni-freiburg.de/api/osm-planet', defaultModeTimeout: 10.0,
  dynamicSuggestions: 2, entityNameAndAliasPattern: '?qleverui_entity osmkey:name
    ?name . ?qleverui_entity osmkey:name|osmkey:alt_name|osmkey:name:en|osmkey:name:de
    ?alias', entityNameAndAliasPatternDefault: 'BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity
    AS ?alias)', entityScorePattern: '{ SELECT ?qleverui_entity ?count WHERE { ?qleverui_entity
    rdf:type osm:relation { ?qleverui_entity osm2rdf:area ?count } UNION { ?qleverui_entity
    osmkey:waterway "river" { SELECT ?qleverui_entity (10 * SUM(?length) AS ?count)
    WHERE { ?qleverui_entity osmrel:member/osm:id/osm2rdf:length ?length } GROUP BY
    ?qleverui_entity } } } }', fillPrefixes: '1', filterEntities: '0', filteredLanguage: en,
  frequentPatternsWithoutOrder: 'geo:hasGeometry/geo:asWKT osmkey:highway osmkey:name',
  frequentPredicates: '', id: 17, isDefault: '0', isNoSlugMode: '0', mapViewBaseURL: 'https://qlever.cs.uni-freiburg.de/petrimaps',
  maxDefault: 100, mixedModeTimeout: 3.0, name: OSM Planet, objectName: '?qleverui_entity
    <https://www.openstreetmap.org/wiki/Key:name> ?qleverui_name .', predicateName: '',
  predicateNameAndAliasPatternWithContext: 'BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity
    AS ?alias)', predicateNameAndAliasPatternWithContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', replacePredicates: '', slug: osm-planet,
  sortKey: B.2, subjectName: '?qleverui_entity <https://www.openstreetmap.org/wiki/Key:name>
    ?qleverui_name .', suggestObjects: "%PREFIXES%\nSELECT ?qui_entity (SAMPLE(?name)\
    \ as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count)\
    \ WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n   \
    \ %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n  }\
    \ GROUP BY ?qui_entity }\n  # IF CURRENT_WORD_EMPTY #\n  OPTIONAL { ?qui_entity\
    \ osmkey:name ?name }\n  BIND (?qui_entity AS ?alias)\n  # ELSE #\n  OPTIONAL\
    \ { ?qui_entity osmkey:name ?name }\n  OPTIONAL { ?qui_entity osmkey:name:en ?optional_alias\
    \ }\n  BIND (COALESCE(?optional_alias, ?qui_entity) AS ?alias)\n  FILTER (REGEX(STR(?name),\
    \ \"^%CURRENT_WORD%\") || REGEX(STR(?alias), \"^%CURRENT_WORD%\"))\n  # ENDIF\
    \ #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)", suggestObjectsContextInsensitive: "%PREFIXES%\n\
    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias)\
    \ (SAMPLE(?count) as ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity)\
    \ AS ?count) WHERE {\n    %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n\
    \  } GROUP BY ?qui_entity }\n  # IF CURRENT_WORD_EMPTY #\n  OPTIONAL { ?qui_entity\
    \ osmkey:name ?name }\n  BIND (?qui_entity AS ?alias)\n  # ELSE #\n  OPTIONAL\
    \ { ?qui_entity osmkey:name ?name }\n  OPTIONAL { ?qui_entity osmkey:name:en ?optional_alias\
    \ }\n  BIND (COALESCE(?optional_alias, ?qui_entity) AS ?alias)\n  FILTER (REGEX(STR(?name),\
    \ \"^%CURRENT_WORD%\") || REGEX(STR(?alias), \"^%CURRENT_WORD%\"))\n  # ENDIF\
    \ #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)", suggestPredicates: "%PREFIXES%\n\
    # IF !CURRENT_SUBJECT_VARIABLE #\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name)\
    \ (SAMPLE(?name) as ?qui_alias) (SAMPLE(?count) as ?qui_count) ?qui_reversed WHERE\
    \ {\n  { { SELECT ?qui_entity (COUNT(?qui_object) AS ?count)\n    WHERE { %CURRENT_SUBJECT%\
    \ ?qui_entity ?qui_object  }\n    GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed)\
    \ }\n  UNION\n  { { SELECT ?qui_entity (COUNT(?qui_subject) AS ?count)\n    WHERE\
    \ { ?qui_subject ?qui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qui_entity }\
    \ BIND (1 AS ?qui_reversed) }\n  BIND (?qui_entity AS ?name)\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?name), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qui_entity ?qui_reversed ORDER BY DESC(?qui_count)\n# ENDIF #\n# IF CURRENT_SUBJECT_VARIABLE\
    \ #\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?name) as ?qui_alias)\
    \ (SAMPLE(?count) as ?qui_count) WHERE {\n  # IF CONNECTED_TRIPLES_EMPTY #\n \
    \ { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count)\n    WHERE { ?qui_subject\
    \ ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  # ELSE #\n  { SELECT\
    \ ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?count)\n    WHERE { %CONNECTED_TRIPLES%\
    \ %CURRENT_SUBJECT% ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  #\
    \ ENDIF #\n  BIND (?qui_entity AS ?name)\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER\
    \ REGEX(STR(?name), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY ?qui_entity\
    \ ORDER BY DESC(?qui_count)\n# ENDIF #", suggestPredicatesContextInsensitive: "%PREFIXES%\n\
    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?name) as ?qui_alias)\
    \ (SAMPLE(?count) as ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity)\
    \ AS ?count)\n    WHERE { ?qui_subject ?qui_entity ?qui_object }\n    GROUP BY\
    \ ?qui_entity }\n  BIND (?qui_entity AS ?name)\n  # IF !CURRENT_WORD_EMPTY #\n\
    \  FILTER REGEX(STR(?name), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY\
    \ ?qui_entity ORDER BY DESC(?qui_count)", suggestPrefixnamesForPredicates: '0',
  suggestSubjects: "%PREFIXES%\n# IF !CURRENT_WORD_EMPTY #\nSELECT ?qui_entity (SAMPLE(?name)\
    \ AS ?qui_name) (SAMPLE(?alias) AS ?qui_alias) (SAMPLE(?count) AS ?qui_count)\
    \ WHERE {\n  { { SELECT ?qui_entity ?name ?alias WHERE {\n      { ?qui_entity\
    \ osmkey:name ?name BIND(?name AS ?alias) FILTER REGEX(STR(?name), \"^%CURRENT_WORD%\"\
    ) } UNION\n      { ?qui_entity osmkey:name ?name . ?qui_entity osmkey:name:en\
    \ ?alias FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\") } } }\n    ?qui_entity\
    \ rdf:type osm:relation . ?qui_entity osm2rdf:area ?count }\n    UNION\n    {\
    \ { SELECT ?qui_entity ?name ?alias WHERE {\n      { ?qui_entity osmkey:name ?name\
    \ BIND(?name AS ?alias) FILTER REGEX(STR(?name), \"^%CURRENT_WORD%\") } UNION\n\
    \      { ?qui_entity osmkey:name ?name . ?qui_entity osmkey:name:en ?alias FILTER\
    \ REGEX(STR(?alias), \"^%CURRENT_WORD%\") } } }\n    { SELECT ?qui_entity (10\
    \ * SUM(?length) AS ?count)\n      WHERE { ?qui_entity osmkey:waterway \"river\"\
    \ .\n                     ?qui_entity osmrel:member/osm2rdfmember:id/osm2rdf:length\
    \ ?length } GROUP BY ?qui_entity } }\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)\n\
    # ENDIF #", suggestSubjectsContextInsensitive: "%PREFIXES%\n# IF !CURRENT_WORD_EMPTY\
    \ #\nSELECT ?qui_entity (SAMPLE(?name) AS ?qui_name) (SAMPLE(?alias) AS ?qui_alias)\
    \ (SAMPLE(?count) AS ?qui_count) WHERE {\n  { { SELECT ?qui_entity ?name ?alias\
    \ WHERE {\n      { ?qui_entity osmkey:name ?name BIND(?name AS ?alias) FILTER\
    \ REGEX(STR(?name), \"^%CURRENT_WORD%\") } UNION\n      { ?qui_entity osmkey:name\
    \ ?name . ?qui_entity osmkey:name:en ?alias FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\"\
    ) } } }\n    ?qui_entity rdf:type osm:relation . ?qui_entity osm2rdf:area ?count\
    \ }\n    UNION\n    { { SELECT ?qui_entity ?name ?alias WHERE {\n      { ?qui_entity\
    \ osmkey:name ?name BIND(?name AS ?alias) FILTER REGEX(STR(?name), \"^%CURRENT_WORD%\"\
    ) } UNION\n      { ?qui_entity osmkey:name ?name . ?qui_entity osmkey:name:en\
    \ ?alias FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\") } } }\n    ?qui_entity\
    \ osmkey:waterway \"river\"\n    { SELECT ?qui_entity (10 * SUM(?length) AS ?count)\n\
    \      WHERE { ?qui_entity osmrel:member/osm:id/osm2rdf:length ?length } GROUP\
    \ BY ?qui_entity } }\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)\n# ENDIF\
    \ #", suggestedPrefixes: "@prefix osmmeta: <https://www.openstreetmap.org/meta/>\
    \ .\r\n@prefix osmway: <https://www.openstreetmap.org/way/> .\r\n@prefix osmkey:\
    \ <https://www.openstreetmap.org/wiki/Key:> .\r\n@prefix osmrel: <https://www.openstreetmap.org/relation/>\
    \ .\r\n@prefix osmnode: <https://www.openstreetmap.org/node/> .\r\n@prefix rdf:\
    \ <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\r\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\
    \ .\r\n@prefix osm: <https://www.openstreetmap.org/> .\r\n@prefix ogc: <http://www.opengis.net/rdf#>\
    \ .\r\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\r\n@prefix wd: <http://www.wikidata.org/entity/>\
    \ .\r\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\r\n@prefix p: <http://www.wikidata.org/prop/>\
    \ .\r\n@prefix ps: <http://www.wikidata.org/prop/statement/> .\r\n@prefix pq:\
    \ <http://www.wikidata.org/prop/qualifier/> .\r\n@prefix geo: <http://www.opengis.net/ont/geosparql#>\
    \ .\r\n@prefix geof: <http://www.opengis.net/def/function/geosparql/> .\r\n@prefix\
    \ osm2rdf: <https://osm2rdf.cs.uni-freiburg.de/rdf#> .\r\n@prefix osm2rdfkey:\
    \ <https://osm2rdf.cs.uni-freiburg.de/rdf/key#> .\r\n@prefix osm2rdfgeom: <https://osm2rdf.cs.uni-freiburg.de/rdf/geom#>\
    \ .\r\n@prefix osm2rdfmember: <https://osm2rdf.cs.uni-freiburg.de/rdf/member#>\
    \ .", suggestionAltNameVariable: '?qui_alias', suggestionEntityVariable: '?qui_entity',
  suggestionNameVariable: '?qui_name', suggestionReversedVariable: '?qui_reversed',
  supportedFunctions: 'asc, desc, avg, values, score, text, count, sample, min, max,
    average, concat, group_concat, langMatches, lang, regex, sum, dist, contains,
    str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year,
    month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if,
    coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric,
    bound', supportedKeywords: 'prefix, select, construct, distinct, where, order,
    limit, offset, optional, by, as, having, not, textlimit, contains-entity, contains-word,
    filter, group, union, optional, has-predicate, bind, minus, service, internal,
    sort, keywords', supportedPredicateSuggestions: 'ql:contains-word, ql:contains-entity',
  warmupQuery1: "SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\r\n  { SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n    %ENTITY_SCORE_PATTERN%\r\
    \n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\r\n  ORDER BY ?qleverui_entity }\r\n}\
    \ GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", warmupQuery2: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?alias", warmupQuery3: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?qleverui_entity", warmupQuery4: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%\r\n  } } }", warmupQuery5: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%\r\n  } } }"}
- {alternativeObjectName: '', alternativePredicateName: '', alternativeSubjectName: '',
  apiToken: '', baseUrl: 'https://qlever.cs.uni-freiburg.de/api/dblp', defaultModeTimeout: 5.0,
  dynamicSuggestions: 2, entityNameAndAliasPattern: '?qui_entity rdfs:label ?alias',
  entityNameAndAliasPatternDefault: 'BIND(?qui_entity AS ?name) BIND(?qui_entity AS
    ?alias)', entityScorePattern: '{ SELECT ?qui_entity ?name (COUNT(?qui_tmp) AS
    ?count) WHERE { ?qui_entity @en@rdfs:label ?name . ?qui_entity ?predicate ?qui_tmp
    } GROUP BY ?qui_entity ?name }', fillPrefixes: '1', filterEntities: '0', filteredLanguage: en,
  frequentPatternsWithoutOrder: '', frequentPredicates: 'rdfs:label dblp:authoredBy',
  id: 15, isDefault: '0', isNoSlugMode: '0', mapViewBaseURL: '', maxDefault: 100,
  mixedModeTimeout: 1.0, name: DBLP, objectName: '', predicateName: '', predicateNameAndAliasPatternWithContext: 'BIND(?qui_entity
    AS ?name) BIND(?qui_entity AS ?alias)', predicateNameAndAliasPatternWithContextDefault: 'BIND(?qui_entity
    AS ?name) BIND(?qui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContext: 'BIND(?qui_entity
    AS ?name) BIND(?qui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContextDefault: 'BIND(?qui_entity
    AS ?name) BIND(?qui_entity AS ?alias)', replacePredicates: '', slug: dblp, sortKey: C.1,
  subjectName: '', suggestObjects: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\nSELECT\
    \ ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity\
    \ (COUNT(?qui_entity) AS ?qui_count) WHERE {\n    %CONNECTED_TRIPLES% %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qui_entity .\n  } GROUP BY ?qui_entity }\n  OPTIONAL {\
    \ ?qui_entity rdfs:label ?qui_alias }\n  BIND (COALESCE(?qui_alias, ?qui_entity)\
    \ AS ?qui_name)\n} ORDER BY DESC(?qui_count)\n# ELSE #\nSELECT ?qui_entity ?qui_name\
    \ ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS\
    \ ?qui_count) WHERE {\n    %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE%\
    \ ?qui_entity .\n  } GROUP BY ?qui_entity }\n  OPTIONAL { ?qui_entity rdfs:label\
    \ ?qui_alias }\n  BIND (?qui_entity AS ?qui_name)\n  FILTER (REGEX(STR(?qui_name),\
    \ \"^%CURRENT_WORD%\") || REGEX(STR(?qui_alias), \"^%CURRENT_WORD%\"))\n} ORDER\
    \ BY DESC(?qui_count)\n# ENDIF #", suggestObjectsContextInsensitive: "%PREFIXES%\n\
    # IF CURRENT_WORD_EMPTY #\nSELECT ?qui_entity ?qui_name ?qui_alias ?qui_count\
    \ WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count) WHERE {\n\
    \    %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n  } GROUP BY ?qui_entity\
    \ }\n  OPTIONAL { ?qui_entity rdfs:label ?qui_alias }\n  BIND (COALESCE(?qui_alias,\
    \ ?qui_entity) AS ?qui_name)\n} ORDER BY DESC(?qui_count)\n# ELSE #\nSELECT ?qui_entity\
    \ ?qui_name ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity)\
    \ AS ?qui_count) WHERE {\n    %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity\
    \ .\n  } GROUP BY ?qui_entity }\n  OPTIONAL { ?qui_entity rdfs:label ?qui_alias\
    \ }\n  BIND (?qui_entity AS ?qui_name)\n  FILTER (REGEX(STR(?qui_name), \"^%CURRENT_WORD%\"\
    ) || REGEX(STR(?qui_alias), \"^%CURRENT_WORD%\"))\n} ORDER BY DESC(?qui_count)\n\
    # ENDIF #", suggestPredicates: "%PREFIXES%\nSELECT ?qui_entity ?qui_name ?qui_alias\
    \ ?qui_count ?qui_reversed WHERE {\n  # IF !CURRENT_SUBJECT_VARIABLE #\n  { {\
    \ SELECT ?qui_entity (COUNT(?qui_object) AS ?qui_count)\n    WHERE { %CURRENT_SUBJECT%\
    \ ?qui_entity ?qui_object  }\n    GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed)\
    \ }\n  UNION\n  { { SELECT ?qui_entity (COUNT(?qui_subject) AS ?qui_count)\n \
    \   WHERE { ?qui_subject ?qui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qui_entity\
    \ } BIND (1 AS ?qui_reversed) }\n  # ENDIF #\n  # IF CURRENT_SUBJECT_VARIABLE\
    \ AND CONNECTED_TRIPLES_EMPTY #\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS\
    \ ?qui_count)\n    WHERE { ?qui_subject ?qui_entity ?qui_object }\n    GROUP BY\
    \ ?qui_entity } BIND (0 AS ?qui_reversed)\n  # ENDIF #\n  # IF CURRENT_SUBJECT_VARIABLE\
    \ AND !CONNECTED_TRIPLES_EMPTY #\n  { SELECT ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%)\
    \ AS ?qui_count)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qui_entity\
    \ ?qui_object }\n    GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed)\n  # ENDIF\
    \ #\n  BIND (?qui_entity AS ?qui_name)\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER\
    \ REGEX(STR(?qui_name), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} ORDER BY DESC(?qui_count)",
  suggestPredicatesContextInsensitive: "%PREFIXES%\nSELECT ?qui_entity ?qui_name ?qui_alias\
    \ ?qui_count WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count)\n\
    \    WHERE { ?qui_subject ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity\
    \ } BIND (0 AS ?qui_reversed)\n  BIND (?qui_entity AS ?qui_name)\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?qui_name), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n\
    } ORDER BY DESC(?qui_count)", suggestPrefixnamesForPredicates: '1', suggestSubjects: "%PREFIXES%\n\
    SELECT ?qui_entity (?qui_alias AS ?qui_name) ?qui_alias ?qui_count WHERE {\n \
    \ { SELECT ?qui_entity ?qui_alias ?qui_count WHERE {\n    { { SELECT ?qui_entity\
    \ (COUNT(?paper) AS ?qui_count) WHERE { ?paper dblp:publishedIn ?qui_entity }\
    \ GROUP BY ?qui_entity } BIND(?qui_entity AS ?qui_alias) } UNION\n    { { SELECT\
    \ ?qui_entity (COUNT(?paper) AS ?qui_count) WHERE { ?paper dblp:authoredBy ?qui_entity\
    \ } GROUP BY ?qui_entity } ?qui_entity rdfs:label ?qui_alias } UNION\n    { {\
    \ SELECT ?qui_entity (COUNT(?author) AS ?qui_count) WHERE { ?qui_entity dblp:authoredBy\
    \ ?author } GROUP BY ?qui_entity } ?qui_entity dblp:title ?qui_alias }\n  } INTERNAL\
    \ SORT BY ?qui_alias }\n  FILTER REGEX(STR(?qui_alias), \"^%CURRENT_WORD%\")\n\
    } ORDER BY DESC(?qui_count)", suggestSubjectsContextInsensitive: "%PREFIXES%\n\
    SELECT ?qui_entity (?qui_alias AS ?qui_name) ?qui_alias ?qui_count WHERE {\n \
    \ { SELECT ?qui_entity ?qui_alias ?qui_count WHERE {\n    { { SELECT ?qui_entity\
    \ (COUNT(?paper) AS ?qui_count) WHERE { ?paper dblp:publishedIn ?qui_entity }\
    \ GROUP BY ?qui_entity } BIND(?qui_entity AS ?qui_alias) } UNION\n    { { SELECT\
    \ ?qui_entity (COUNT(?paper) AS ?qui_count) WHERE { ?paper dblp:authoredBy ?qui_entity\
    \ } GROUP BY ?qui_entity } ?qui_entity rdfs:label ?qui_alias } UNION\n    { {\
    \ SELECT ?qui_entity (COUNT(?author) AS ?qui_count) WHERE { ?qui_entity dblp:authoredBy\
    \ ?author } GROUP BY ?qui_entity } ?qui_entity dblp:title ?qui_alias }\n  } INTERNAL\
    \ SORT BY ?qui_alias }\n  FILTER REGEX(STR(?qui_alias), \"^%CURRENT_WORD%\")\n\
    } ORDER BY DESC(?qui_count)", suggestedPrefixes: "PREFIX dblps: <https://dblp.org/rdf/schema-2020-07-01#>\r\
    \nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\
    \nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\r\nPREFIX dblp: <https://dblp.org/rdf/schema#>\r\
    \nPREFIX datacite: <http://purl.org/spar/datacite/>\r\nPREFIX literal: <http://purl.org/spar/literal/>\r\
    \nPREFIX owl: <http://www.w3.org/2002/07/owl#>\r\nPREFIX terms: <http://purl.org/dc/terms/>\r\
    \nPREFIX cito: <http://purl.org/spar/cito/>\r\nPREFIX bibtex: <http://purl.org/net/nknouf/ns/bibtex#>\r\
    \nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\r\nPREFIX wd: <http://www.wikidata.org/entity/>\r\
    \nPREFIX wikibase: <http://wikiba.se/ontology#>\r\nPREFIX schema: <http://schema.org/>\r\
    \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>", suggestionAltNameVariable: '?qui_alias',
  suggestionEntityVariable: '?qui_entity', suggestionNameVariable: '?qui_name', suggestionReversedVariable: '?qui_reversed',
  supportedFunctions: 'asc, desc, avg, values, score, text, count, sample, min, max,
    average, concat, group_concat, langMatches, lang, regex, sum, dist, contains,
    str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year,
    month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if,
    coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric,
    bound', supportedKeywords: 'prefix, select, construct, distinct, where, order,
    limit, offset, optional, by, as, having, not, textlimit, contains-entity, contains-word,
    filter, group, union, optional, has-predicate, bind, minus, service, internal,
    sort, keywords', supportedPredicateSuggestions: 'ql:contains-word, ql:contains-entity',
  warmupQuery1: "SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\r\n  {\
    \ SELECT ?qui_entity (COUNT(?predicate) AS ?qui_count) WHERE { ?qui_entity ?predicate\
    \ ?qui_tmp } GROUP BY ?qui_entity }\r\n  ?qui_entity rdfs:label ?qui_name .\r\n\
    \  BIND (?qui_name AS ?qui_alias)\r\n} ORDER BY DESC(?qui_count)", warmupQuery2: "SELECT\
    \ ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\r\n  { SELECT ?qui_entity\
    \ (COUNT(?predicate) AS ?qui_count) WHERE { ?qui_entity ?predicate ?qui_tmp }\
    \ GROUP BY ?qui_entity }\r\n  ?qui_entity rdfs:label ?qui_name .\r\n  BIND (?qui_name\
    \ AS ?qui_alias)\r\n} INTERNAL SORT BY ?qui_alias", warmupQuery3: "SELECT ?qui_entity\
    \ (COALESCE(?qui_name_tmp, ?qui_entity) AS ?qui_name) (?qui_name AS ?qui_alias)\
    \ ?qui_count WHERE {\r\n  { SELECT ?qui_entity (COUNT(DISTINCT ?qui_tmp_1) AS\
    \ ?qui_count) WHERE { ?qui_tmp_1 ?qui_entity ?qui_tmp_2 } GROUP BY ?qui_entity\
    \ }\r\n  OPTIONAL { ?qui_entity rdfs:label ?qui_name_tmp }\r\n} ORDER BY DESC(?qui_count)",
  warmupQuery4: "SELECT ?qui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT\
    \ ?qui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qui_entity\
    \ ?object } GROUP BY ?qui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qui_entity ?object } GROUP BY ?qui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%\r\
    \n  } } }", warmupQuery5: "SELECT ?qui_entity ?name ?alias ?count_1 WHERE {\r\n\
    \  { { SELECT ?qui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject\
    \ ?qui_entity ?object } GROUP BY ?qui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qui_entity ?object } GROUP BY ?qui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%\r\
    \n  } } }"}
- {alternativeObjectName: '', alternativePredicateName: '', alternativeSubjectName: '',
  apiToken: aof4Ad, baseUrl: 'https://qlever.informatik.uni-freiburg.de/api/freebase',
  defaultModeTimeout: 5.0, dynamicSuggestions: 2, entityNameAndAliasPattern: '?qleverui_entity
    @en@fb:type.object.name ?name . ?qleverui_entity @en@fb:type.object.name|@en@fb:common.topic.alias
    ?alias', entityNameAndAliasPatternDefault: 'BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity
    AS ?alias)', entityScorePattern: '{ SELECT ?qleverui_entity (COUNT(?qleverui_tmp)
    AS ?count) WHERE { ?qleverui_entity @en@fb:type.object.name ?name . ?qleverui_entity
    fb:type.object.type ?qleverui_tmp } GROUP BY ?qleverui_entity }', fillPrefixes: '1',
  filterEntities: '0', filteredLanguage: en, frequentPatternsWithoutOrder: '', frequentPredicates: 'fb:type.object.name
    fb:type.object.type', id: 10, isDefault: '0', isNoSlugMode: '0', mapViewBaseURL: '',
  maxDefault: 100, mixedModeTimeout: 1.0, name: Freebase, objectName: '?qleverui_entity
    fb:type.object.name ?qleverui_name .', predicateName: '', predicateNameAndAliasPatternWithContext: '?qleverui_entity
    @en@fb:type.object.name ?name . ?qleverui_entity @en@fb:type.object.name|@en@fb:common.topic.alias
    ?alias', predicateNameAndAliasPatternWithContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContext: '?qleverui_entity
    @en@fb:type.object.name ?name . ?qleverui_entity @en@fb:type.object.name|@en@fb:common.topic.alias
    ?alias', predicateNameAndAliasPatternWithoutContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', replacePredicates: '', slug: freebase,
  sortKey: A.2, subjectName: '?qleverui_entity fb:type.object.name ?qleverui_name
    .', suggestObjects: "%PREFIXES%\nSELECT ?qleverui_entity\n              (MIN(?name)\
    \ AS ?qleverui_name)\n              (MIN(?alias) AS ?qleverui_alias)\n       \
    \       (MAX(?count_1) AS ?qleverui_count) WHERE {\n  {\n\n    { SELECT ?qleverui_entity\
    \ ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity (COUNT(?qleverui_entity)\
    \ AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE%\
    \ ?qleverui_entity .\n      } GROUP BY ?qleverui_entity }\n      { %WARMUP_QUERY_3%\
    \ }\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\"\
    )\n      # ENDIF #\n    } }\n\n  } UNION {\n\n    { SELECT ?qleverui_entity ?name\
    \ ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity (COUNT(?qleverui_entity)\
    \ AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE%\
    \ ?qleverui_entity\n      } GROUP BY ?qleverui_entity }\n      %ENTITY_NAME_AND_ALIAS_PATTERN_DEFAULT%\n\
    \      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\"\
    )\n      # ENDIF #\n    } }\n\n  }\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)",
  suggestObjectsContextInsensitive: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\
    \n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\"\
    )\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n\
    # ENDIF #", suggestPredicates: "%PREFIXES%\n# IF !CURRENT_SUBJECT_VARIABLE #\n\
    \nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n    \
    \          (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_2) as\
    \ ?qleverui_count)\n              ?qleverui_reversed WHERE {\n\n  { { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_tmp) AS ?count_2)\n    WHERE { %CURRENT_SUBJECT% ?qleverui_entity\
    \ ?qleverui_tmp  }\n    GROUP BY ?qleverui_entity }\n  BIND (0 AS ?qleverui_reversed)\
    \ }\n  UNION\n  { { SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n\
    \    WHERE { ?qleverui_tmp ?qleverui_entity %CURRENT_SUBJECT%  }\n    GROUP BY\
    \ ?qleverui_entity }\n    BIND (1 AS ?qleverui_reversed) }\n  { %WARMUP_QUERY_5%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\"\
    , \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ?qleverui_reversed ORDER BY\
    \ DESC(?qleverui_count)\n\n# ENDIF #\n# IF CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE\
    \ #\n\nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n\
    \              (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_1)\
    \ as ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #\n\n# IF !CONNECTED_TRIPLES_EMPTY\
    \ AND CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n              (MIN(?name)\
    \ as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n       \
    \       (SAMPLE(?count_2) as ?qleverui_count) WHERE {\n  { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?count_2)\n    WHERE { %CONNECTED_TRIPLES%\
    \ %CURRENT_SUBJECT% ?qleverui_entity ?object }\n    GROUP BY ?qleverui_entity\
    \ }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias),\
    \ \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY\
    \ DESC(?qleverui_count)\n\n# ENDIF #", suggestPredicatesContextInsensitive: "%PREFIXES%\n\
    \nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n    \
    \          (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_1) as\
    \ ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", suggestPrefixnamesForPredicates: '0',
  suggestSubjects: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n\
    # ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\"\
    )\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n\
    # ENDIF #", suggestSubjectsContextInsensitive: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY\
    \ #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name)\
    \ AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\
    \n# ENDIF #", suggestedPrefixes: "PREFIX fb: <http://rdf.freebase.com/ns/>\r\n\
    PREFIX fbkey: <http://rdf.freebase.com/key/>\r\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\
    \nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>", suggestionAltNameVariable: '?qleverui_altname',
  suggestionEntityVariable: '?qleverui_entity', suggestionNameVariable: '?qleverui_name',
  suggestionReversedVariable: '?qleverui_reversed', supportedFunctions: 'asc, desc,
    avg, values, score, text, count, sample, min, max, average, concat, group_concat,
    langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts,
    strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor,
    round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri,
    isiri, isblank, isliteral, isNumeric, bound', supportedKeywords: 'prefix, select,
    construct, distinct, where, order, limit, offset, optional, by, as, having, not,
    textlimit, contains-entity, contains-word, filter, group, union, optional, has-predicate,
    bind, minus, service, internal, sort, keywords', supportedPredicateSuggestions: 'ql:contains-word,
    ql:contains-entity', warmupQuery1: "SELECT ?qleverui_entity (SAMPLE(?name) AS\
    \ ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\r\n  { SELECT ?qleverui_entity ?name ?alias ?count WHERE {\r\n    %ENTITY_SCORE_PATTERN%\r\
    \n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\r\n  ORDER BY ?qleverui_entity }\r\n}\
    \ GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", warmupQuery2: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?alias", warmupQuery3: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?qleverui_entity", warmupQuery4: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%\r\n  } } }", warmupQuery5: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%\r\n  } } }"}
- {alternativeObjectName: '?qleverui_entity @en@<http://www.w3.org/2004/02/skos/core#altLabel>
    ?qleverui_altname .', alternativePredicateName: '{ { { ?qleverui_claim <http://wikiba.se/ontology#directClaim>
    ?qleverui_entity .

    ?qleverui_claim @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname
    } UNION

    { ?qleverui_claim <http://wikiba.se/ontology#claim> ?qleverui_entity .

    ?qleverui_claim @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname
    } } UNION

    { ?qleverui_claim <http://wikiba.se/ontology#statementProperty> ?qleverui_entity
    .

    ?qleverui_claim @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname
    } } UNION

    { ?qleverui_claim <http://wikiba.se/ontology#qualifier> ?qleverui_entity .

    ?qleverui_claim @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname
    } .', alternativeSubjectName: '?qleverui_entity @en@<http://www.w3.org/2004/02/skos/core#altLabel>
    ?qleverui_altname .', apiToken: aof4Ad, baseUrl: 'https://qlever.cs.uni-freiburg.de/api/wikidata',
  defaultModeTimeout: 5.0, dynamicSuggestions: 2, entityNameAndAliasPattern: '?qleverui_entity
    @en@rdfs:label ?name . ?qleverui_entity @en@rdfs:label|@en@skos:altLabel ?alias
    .', entityNameAndAliasPatternDefault: 'BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity
    AS ?alias)', entityScorePattern: '{ SELECT ?qleverui_entity (COUNT(?qleverui_tmp)
    AS ?count) WHERE { ?qleverui_tmp schema:about ?qleverui_entity } GROUP BY ?qleverui_entity
    }', fillPrefixes: '1', filterEntities: '0', filteredLanguage: en, frequentPatternsWithoutOrder: '#wdt:P31
    #wdt:P279 #wdt:P279+ ^schema:about/wikibase:sitelinks', frequentPredicates: 'wdt:P31
    wdt:P279 #wdt:P279+ #schema:about #wikibase:sitelinks #@en@rdfs:label', id: 8,
  isDefault: '0', isNoSlugMode: '0', mapViewBaseURL: 'https://qlever.cs.uni-freiburg.de/petrimaps',
  maxDefault: 100, mixedModeTimeout: 1.0, name: Wikidata, objectName: '?qleverui_entity
    @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name .', predicateName: '{
    { { ?qleverui_claim <http://wikiba.se/ontology#directClaim> ?qleverui_entity .

    ?qleverui_claim @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name
    } UNION

    { ?qleverui_claim <http://wikiba.se/ontology#claim> ?qleverui_entity .

    ?qleverui_claim @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name
    } } UNION

    { ?qleverui_claim <http://wikiba.se/ontology#statementProperty> ?qleverui_entity
    .

    ?qleverui_claim @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name
    } } UNION

    { ?qleverui_claim <http://wikiba.se/ontology#qualifier> ?qleverui_entity .

    ?qleverui_claim @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name
    } .', predicateNameAndAliasPatternWithContext: '?entity ?qleverui_tmp ?qleverui_entity
    . ?entity @en@rdfs:label ?name . ?entity @en@rdfs:label|@en@skos:altLabel ?alias',
  predicateNameAndAliasPatternWithContextDefault: 'BIND(?qleverui_entity AS ?name)
    BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContext: '?entity
    wikibase:directClaim ?qleverui_entity . ?entity @en@rdfs:label ?name . ?entity
    @en@rdfs:label|@en@skos:altLabel ?alias', predicateNameAndAliasPatternWithoutContextDefault: "#\
    \ VALUES ?qleverui_entity { schema:about_TEMPORARILY_DISABLED }\r\nBIND(?qleverui_entity\
    \ AS ?name) BIND(?qleverui_entity AS ?alias)", replacePredicates: "<http://www.w3.org/2000/01/rdf-schema#label>\
    \ @en@<http://www.w3.org/2000/01/rdf-schema#label>\r\n<http://schema.org/name>\
    \ @en@<http://schema.org/name>\r\n<http://wikiba.se/ontology#label> @en@<http://wikiba.se/ontology#label>",
  slug: wikidata, sortKey: A.1, subjectName: '?qleverui_entity @en@<http://www.w3.org/2000/01/rdf-schema#label>
    ?qleverui_name .', suggestObjects: "%PREFIXES%\nSELECT ?qui_entity (SAMPLE(?name)\
    \ as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count)\
    \ WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n   \
    \ %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n  }\
    \ GROUP BY ?qui_entity }\n  # IF CURRENT_WORD_EMPTY #\n  OPTIONAL { ?qui_entity\
    \ @en@rdfs:label ?name }\n  BIND (?qui_entity AS ?alias)\n  # ELSE #\n  OPTIONAL\
    \ { ?qui_entity @en@rdfs:label ?name }\n  OPTIONAL { ?qui_entity @en@skos:altLabel\
    \ ?optional_alias }\n  BIND (COALESCE(?optional_alias, ?qui_entity) AS ?alias)\n\
    \  FILTER (REGEX(STR(?name), \"^%CURRENT_WORD%\") || REGEX(STR(?alias), \"^%CURRENT_WORD%\"\
    ))\n  # ENDIF #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)", suggestObjectsContextInsensitive: "%PREFIXES%\n\
    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias)\
    \ (SAMPLE(?count) as ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity)\
    \ AS ?count) WHERE {\n    %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n\
    \  } GROUP BY ?qui_entity }\n  # IF CURRENT_WORD_EMPTY #\n  OPTIONAL { ?qui_entity\
    \ @en@rdfs:label ?name }\n  BIND (?qui_entity AS ?alias)\n  # ELSE #\n  OPTIONAL\
    \ { ?qui_entity @en@rdfs:label ?name }\n  OPTIONAL { ?qui_entity @en@skos:altLabel\
    \ ?optional_alias }\n  BIND (COALESCE(?optional_alias, ?qui_entity) AS ?alias)\n\
    \  FILTER (REGEX(STR(?name), \"^%CURRENT_WORD%\") || REGEX(STR(?alias), \"^%CURRENT_WORD%\"\
    ))\n  # ENDIF #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)", suggestPredicates: "%PREFIXES%\n\
    # IF !CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name)\
    \ (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) ?qui_reversed\
    \ WHERE {\n  { { SELECT ?qui_entity (COUNT(?qui_object) AS ?count)\n    WHERE\
    \ { %CURRENT_SUBJECT% ?qui_entity ?qui_object  }\n    GROUP BY ?qui_entity } BIND\
    \ (0 AS ?qui_reversed) }\n  UNION\n  { { SELECT ?qui_entity (COUNT(?qui_subject)\
    \ AS ?count)\n    WHERE { ?qui_subject ?qui_entity %CURRENT_SUBJECT%  }\n    GROUP\
    \ BY ?qui_entity } BIND (1 AS ?qui_reversed) }\n  # IF CURRENT_WORD_EMPTY #\n\
    \  ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .\n  ?qui_tmp_1 @en@rdfs:label ?name .\n\
    \  BIND (?name AS ?alias)\n  # ELSE #\n  ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .\n\
    \  ?qui_tmp_1 @en@rdfs:label ?name .\n  OPTIONAL { ?qui_tmp_1 @en@skos:altLabel\
    \ ?alias }\n  FILTER (REGEX(STR(?name), \"%CURRENT_WORD%\", \"i\") || REGEX(STR(?alias),\
    \ \"%CURRENT_WORD%\", \"i\"))\n  # ENDIF #\n} GROUP BY ?qui_entity ?qui_reversed\
    \ ORDER BY DESC(?qui_count)\n\n# ENDIF #\n# IF CURRENT_SUBJECT_VARIABLE #\n\n\
    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias)\
    \ (SAMPLE(?count) as ?qui_count) WHERE {\n  # IF CONNECTED_TRIPLES_EMPTY #\n \
    \ { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count)\n    WHERE { ?qui_subject\
    \ ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  # ELSE #\n  { SELECT\
    \ ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?count)\n    WHERE { %CONNECTED_TRIPLES%\
    \ %CURRENT_SUBJECT% ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  #\
    \ ENDIF #\n  # IF CURRENT_WORD_EMPTY #\n  ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .\n\
    \  ?qui_tmp_1 @en@rdfs:label ?name .\n  BIND (?name AS ?alias)\n  # ELSE #\n \
    \ ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .\n  ?qui_tmp_1 @en@rdfs:label ?name .\n \
    \ OPTIONAL { ?qui_tmp_1 @en@skos:altLabel ?alias }\n  FILTER (REGEX(STR(?name),\
    \ \"%CURRENT_WORD%\", \"i\") || REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\"))\n\
    \  # ENDIF #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)\n\n# ENDIF #",
  suggestPredicatesContextInsensitive: "%PREFIXES%\nSELECT ?qui_entity (SAMPLE(?name)\
    \ as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count)\
    \ WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count)\n    WHERE {\
    \ ?qui_subject ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  # IF CURRENT_WORD_EMPTY\
    \ #\n  ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .\n  ?qui_tmp_1 @en@rdfs:label ?name\
    \ .\n  BIND (?name AS ?alias)\n  # ELSE #\n  ?qui_tmp_1 ?qui_tmp_2 ?qui_entity\
    \ .\n  ?qui_tmp_1 @en@rdfs:label ?name .\n  ?qui_tmp_1 @en@skos:altLabel ?alias\
    \ .\n  FILTER (REGEX(STR(?name), \"%CURRENT_WORD%\", \"i\") || REGEX(STR(?alias),\
    \ \"%CURRENT_WORD%\", \"i\"))\n  # ENDIF #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)",
  suggestPrefixnamesForPredicates: '0', suggestSubjects: "%PREFIXES%\n# IF !CURRENT_WORD_EMPTY\
    \ #\n\nSELECT ?qui_entity (SAMPLE(?name) AS ?qui_name) (SAMPLE(?alias) AS ?qui_alias)\
    \ (SAMPLE(?sitelinks) AS ?qui_count) WHERE {\n  { SELECT ?qui_entity ?name ?alias\
    \ WHERE {\n      ?qui_entity @en@rdfs:label ?name .\n      ?qui_entity @en@skos:altLabel\
    \ ?alias .\n      FILTER (REGEX(STR(?name), \"^%CURRENT_WORD%\") || REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")) } }\n  ?qui_entity ^schema:about ?m . ?m wikibase:sitelinks\
    \ ?sitelinks\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)\n\n# ENDIF #",
  suggestSubjectsContextInsensitive: "%PREFIXES%\n# IF !CURRENT_WORD_EMPTY #\n\nSELECT\
    \ ?qui_entity (SAMPLE(?name) AS ?qui_name) (SAMPLE(?alias) AS ?qui_alias) (SAMPLE(?sitelinks)\
    \ AS ?qui_count) WHERE {\n  { SELECT ?qui_entity ?name ?alias WHERE {\n      ?qui_entity\
    \ @en@rdfs:label ?name .\n      ?qui_entity @en@skos:altLabel ?alias .\n     \
    \ FILTER (REGEX(STR(?name), \"^%CURRENT_WORD%\") || REGEX(STR(?alias), \"^%CURRENT_WORD%\"\
    )) } }\n  ?qui_entity ^schema:about ?m . ?m wikibase:sitelinks ?sitelinks\n} GROUP\
    \ BY ?qui_entity ORDER BY DESC(?qui_count)\n\n# ENDIF #", suggestedPrefixes: "@prefix\
    \ rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\r\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#>\
    \ .\r\n@prefix ontolex: <http://www.w3.org/ns/lemon/ontolex#> .\r\n@prefix dct:\
    \ <http://purl.org/dc/terms/> .\r\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\
    \ .\r\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\r\n@prefix wikibase: <http://wikiba.se/ontology#>\
    \ .\r\n@prefix skos: <http://www.w3.org/2004/02/skos/core#> .\r\n@prefix schema:\
    \ <http://schema.org/> .\r\n@prefix cc: <http://creativecommons.org/ns#> .\r\n\
    @prefix geo: <http://www.opengis.net/ont/geosparql#> .\r\n@prefix geof: <http://www.opengis.net/def/function/geosparql/>\
    \ .\r\n@prefix prov: <http://www.w3.org/ns/prov#> .\r\n@prefix wd: <http://www.wikidata.org/entity/>\
    \ .\r\n@prefix data: <https://www.wikidata.org/wiki/Special:EntityData/> .\r\n\
    @prefix s: <http://www.wikidata.org/entity/statement/> .\r\n@prefix ref: <http://www.wikidata.org/reference/>\
    \ .\r\n@prefix v: <http://www.wikidata.org/value/> .\r\n@prefix wdt: <http://www.wikidata.org/prop/direct/>\
    \ .\r\n@prefix wdtn: <http://www.wikidata.org/prop/direct-normalized/> .\r\n@prefix\
    \ p: <http://www.wikidata.org/prop/> .\r\n@prefix ps: <http://www.wikidata.org/prop/statement/>\
    \ .\r\n@prefix psv: <http://www.wikidata.org/prop/statement/value/> .\r\n@prefix\
    \ psn: <http://www.wikidata.org/prop/statement/value-normalized/> .\r\n@prefix\
    \ pq: <http://www.wikidata.org/prop/qualifier/> .\r\n@prefix pqv: <http://www.wikidata.org/prop/qualifier/value/>\
    \ .\r\n@prefix pqn: <http://www.wikidata.org/prop/qualifier/value-normalized/>\
    \ .\r\n@prefix pr: <http://www.wikidata.org/prop/reference/> .\r\n@prefix prv:\
    \ <http://www.wikidata.org/prop/reference/value/> .\r\n@prefix prn: <http://www.wikidata.org/prop/reference/value-normalized/>\
    \ .\r\n@prefix wdno: <http://www.wikidata.org/prop/novalue/> .\r\n@prefix imdb:\
    \ <https://www.imdb.com/> .\r\n@prefix qfn: <http://qlever.cs.uni-freiburg.de/function#>\
    \ .\r\n@prefix ql: <http://qlever.cs.uni-freiburg.de/builtin-functions/> .", suggestionAltNameVariable: '?qui_alias',
  suggestionEntityVariable: '?qui_entity', suggestionNameVariable: '?qui_name', suggestionReversedVariable: '?qui_reversed',
  supportedFunctions: 'asc, desc, avg, values, score, text, count, sample, min, max,
    average, concat, group_concat, langMatches, lang, regex, sum, dist, contains,
    str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year,
    month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if,
    coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric,
    bound, uri, lcase, ucase', supportedKeywords: 'prefix, select, construct, distinct,
    where, order, limit, offset, optional, by, as, having, not, textlimit, contains-entity,
    contains-word, filter, group, union, optional, has-predicate, bind, minus, service,
    internal, sort, keywords, from, named, graph, datatype', supportedPredicateSuggestions: 'ql:contains-word,
    ql:contains-entity', warmupQuery1: "SELECT ?qleverui_entity (SAMPLE(?name) AS\
    \ ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\r\n  { SELECT ?qleverui_entity ?name ?alias ?count WHERE {\r\n    %ENTITY_SCORE_PATTERN%\r\
    \n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\r\n  ORDER BY ?qleverui_entity }\r\n}\
    \ GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", warmupQuery2: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?alias", warmupQuery3: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?qleverui_entity", warmupQuery4: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%\r\n  } } }", warmupQuery5: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%\r\n  } } }"}
- {alternativeObjectName: '', alternativePredicateName: '', alternativeSubjectName: '',
  apiToken: aof4Ad, baseUrl: 'https://qlever.cs.uni-freiburg.de/api/fbeasy', defaultModeTimeout: 5.0,
  dynamicSuggestions: 3, entityNameAndAliasPattern: 'BIND(?qleverui_entity AS ?name)
    BIND(?qleverui_entity AS ?alias)', entityNameAndAliasPatternDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', entityScorePattern: '{ SELECT ?qleverui_entity
    (COUNT(?predicate) AS ?count) WHERE { ?qleverui_entity ql:has-predicate ?predicate
    } GROUP BY ?qleverui_entity }', fillPrefixes: '1', filterEntities: '0', filteredLanguage: en,
  frequentPatternsWithoutOrder: '', frequentPredicates: <is-a>, id: 1, isDefault: '0',
  isNoSlugMode: '0', mapViewBaseURL: '', maxDefault: 100, mixedModeTimeout: 1.0, name: Freebase
    Easy, objectName: '', predicateName: '', predicateNameAndAliasPatternWithContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContext: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', predicateNameAndAliasPatternWithoutContextDefault: 'BIND(?qleverui_entity
    AS ?name) BIND(?qleverui_entity AS ?alias)', replacePredicates: '', slug: fbeasy,
  sortKey: A.3, subjectName: '', suggestObjects: "%PREFIXES%\nSELECT ?qleverui_entity\n\
    \              (MIN(?name) AS ?qleverui_name)\n              (MIN(?alias) AS ?qleverui_alias)\n\
    \              (MAX(?count_1) AS ?qleverui_count) WHERE {\n  {\n\n    { SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qleverui_entity .\n      } GROUP BY ?qleverui_entity }\n\
    \      { %WARMUP_QUERY_3% }\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n\n  } UNION {\n\n    { SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity\
    \ (COUNT(?qleverui_entity) AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT%\
    \ %CURRENT_PREDICATE% ?qleverui_entity\n      } GROUP BY ?qleverui_entity }\n\
    \      %ENTITY_NAME_AND_ALIAS_PATTERN_DEFAULT%\n      # IF !CURRENT_WORD_EMPTY\
    \ #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n      # ENDIF #\n \
    \   } }\n\n  }\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", suggestObjectsContextInsensitive: "%PREFIXES%\n\
    # IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity\
    \ (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count)\
    \ AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY\
    \ ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestPredicates: "%PREFIXES%\n\
    # IF !CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n              (MIN(?name)\
    \ as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n       \
    \       (SAMPLE(?count_2) as ?qleverui_count)\n              ?qleverui_reversed\
    \ WHERE {\n\n  { { SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n\
    \    WHERE { %CURRENT_SUBJECT% ?qleverui_entity ?qleverui_tmp  }\n    GROUP BY\
    \ ?qleverui_entity }\n  BIND (0 AS ?qleverui_reversed) }\n  UNION\n  { { SELECT\
    \ ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n    WHERE { ?qleverui_tmp\
    \ ?qleverui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qleverui_entity }\n   \
    \ BIND (1 AS ?qleverui_reversed) }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ?qleverui_reversed ORDER BY DESC(?qleverui_count)\n\n# ENDIF\
    \ #\n# IF CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n\
    \              (MIN(?name) as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n\
    \              (SAMPLE(?count_1) as ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\"\
    , \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\
    \n# ENDIF #\n\n# IF !CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\n\
    SELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n      \
    \        (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_2) as\
    \ ?qleverui_count) WHERE {\n  { SELECT ?qleverui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%)\
    \ AS ?count_2)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qleverui_entity\
    \ ?object }\n    GROUP BY ?qleverui_entity }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #", suggestPredicatesContextInsensitive: "%PREFIXES%\n\
    \nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n    \
    \          (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_1) as\
    \ ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4% }\n  # IF !CURRENT_WORD_EMPTY\
    \ #\n  FILTER REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP\
    \ BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", suggestPrefixnamesForPredicates: '0',
  suggestSubjects: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n\
    # ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias)\
    \ AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2%\
    \ }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\"\
    )\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n\
    # ENDIF #", suggestSubjectsContextInsensitive: "%PREFIXES%\n# IF CURRENT_WORD_EMPTY\
    \ #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name)\
    \ AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias),\
    \ \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\
    \n# ENDIF #", suggestedPrefixes: '', suggestionAltNameVariable: '?qleverui_altname',
  suggestionEntityVariable: '?qleverui_entity', suggestionNameVariable: '?qleverui_name',
  suggestionReversedVariable: '?qleverui_reversed', supportedFunctions: 'asc, desc,
    avg, values, score, text, count, sample, min, max, average, concat, group_concat,
    langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts,
    strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor,
    round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri,
    isiri, isblank, isliteral, isNumeric, bound', supportedKeywords: 'prefix, select,
    construct, distinct, where, order, limit, offset, optional, by, as, having, not,
    textlimit, contains-entity, contains-word, filter, group, union, optional, has-predicate,
    bind, minus, service, internal, sort, keywords', supportedPredicateSuggestions: 'ql:contains-word,
    ql:contains-entity', warmupQuery1: "SELECT ?qleverui_entity (SAMPLE(?name) AS\
    \ ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count)\
    \ WHERE {\r\n  { SELECT ?qleverui_entity ?name ?alias ?count WHERE {\r\n    %ENTITY_SCORE_PATTERN%\r\
    \n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\r\n  ORDER BY ?qleverui_entity }\r\n}\
    \ GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)", warmupQuery2: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?alias", warmupQuery3: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count WHERE {\r\n  %ENTITY_SCORE_PATTERN%\r\n\
    \  %ENTITY_NAME_AND_ALIAS_PATTERN%\r\n} INTERNAL SORT BY ?qleverui_entity", warmupQuery4: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%\r\n  } } }", warmupQuery5: "SELECT\
    \ ?qleverui_entity ?name ?alias ?count_1 WHERE {\r\n  { { SELECT ?qleverui_entity\
    \ (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object\
    \ } GROUP BY ?qleverui_entity }\r\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\r\
    \n  } UNION {\r\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1)\
    \ WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\r\n\
    \    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%\r\n  } } }"}
