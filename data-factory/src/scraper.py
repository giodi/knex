import re
from pathlib import Path

import polars as pl
import requests
from bs4 import BeautifulSoup

DATA_PATH = Path("data").absolute()
url = "https://katalog.burgerbib.ch/deskriptorensuche.aspx"
desk_df = pl.read_csv(DATA_PATH / "input" / "personendeskriptoren.csv", separator=";", columns=["ID-Name", "ID-Nr."])
personendeskriptoren_zusatz_csv = DATA_PATH / "input" / "personendeskriptoren_zusatz.csv"

if personendeskriptoren_zusatz_csv.exists():
	print("File personendeskriptoren_zusatz.csv already exists. Delete it if you want to begin scraping.")
	exit(1)

with open(personendeskriptoren_zusatz_csv, mode="w") as f:
	f.write("desk_id,role,entity_name,entity_id\n")

for row in desk_df.rows(named=True):

	df = pl.DataFrame()
	print(str(row["ID-Nr."]) + ': ' + row["ID-Name"])

	desk_name = re.findall(r".+(?=\(Personen\\Nat√ºrliche Personen\\.+\))", row["ID-Name"])[0]
	desk_id = row["ID-Nr."]

	payload = {
	    "ctl00$RadScriptManager1": "ctl00$cphMainArea$updDeskriptorensuche|ctl00$cphMainArea$cmdSuchen",
	    "ctl00_RadScriptManager1_TSM": ";;System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35:en-US:d20f15a2-81e5-4f24-80b9-9fe501a4ce09:ea597d4b:b25378d2;Telerik.Web.UI:en-US:366ce917-c5cd-4c60-b5c7-0560a9bf3282:16e4e7cd:365331c3:24ee1bba:ed16cbdc:33715776:58366029:e330518b:2003d0b8:c128760b:1e771326:88144a7a:c8618e41:1a73651d:333f8d94;",
	    "ctl00$cphMainArea$cboThesaurus": "10000",
	    "ctl00$cphMainArea$cboVergleichsoperator": "3",
	    "ctl00$cphMainArea$txtBezeichnung": desk_name,
	    "ctl00_cphMainArea_rgrdListe_ClientState": "",
	    "ctl00_radMenu_ClientState": "",
	    "__LASTFOCUS": "",
	    "__EVENTTARGET": "",
	    "__EVENTARGUMENT": "",
	    "__VIEWSTATE": "",
	    "__VIEWSTATEGENERATOR": "123C9B61",
	    "__SCROLLPOSITIONX": "0",
	    "__SCROLLPOSITIONY": "0",
	    "__PREVIOUSPAGE": "5nzeIQ2GAPLU6wLS2ZSC5p1hRX_a8NO6TLmbRidcxXRfqwRHlGUF3b7HfxUd6LbgJog_KGm3O_gtm4XuSPkuTXt9zpcMyvj_zR9QUHAiYs01",
	    "__EVENTVALIDATION": "Zfo1o04goUdw07mx1vXc9OjQ6/1HamJMHXYQ2oXgc4dL1ugWYFUF2T064fUYYAJLYtdhdQbXAtIiHO79PTQn6qbhUzfUBJqTLNtWeCdO5CRcmXGi0+K0Hc+PtA2DLTOf4NyVQht2O45r0gMemPPhcpoTmeF5WIBOFKDwhShvN156H8pB9xyPuabYcr0jC2uUwzDDJ+nLiJSwEogSclBuqPiF3Xl3q39xARuBOwQHWbrIrdK7l7L1I4a+UFfxNPkokZ0rn4ueyfUcZ5qH1ONRrDXnSQm/W7fDBJvsL67qs6GtakRUDd5coYFRYZI3iyhIlRSykqdfh0DKktASLGWCiX4/P8hC3Q7p2u81ViWtSWK7+veaG6VVW6hrwTifZzsppfghU+8FPze/uRIIiyljrkGTMsHCzUCLEl7YOGA3GuOFo8C7/QT/jhbbvsycp8/4LJ/hZXSG7zrD4m4cQExwAeAJYoj+v3RHuYd4/XdGrr5Z7Lqc9nKaNbzsqqI9vBBFPwH5dsF2abfo7GGu9Amqool/NnoCo0uHMw3mBsIKqptpOCLGpRYwsXLQrz3xHEXmAbqvOmyeR5EPDyWlZ0HRYtrYP8AAlTNfFvyjjmLDA8mkq57YRJa3aGorK9VSvFIL",
	    "__ASYNCPOST": "true",
	    "ctl00$cphMainArea$cmdSuchen": "Suchen"
	}

	headers = {
	    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:133.0) Gecko/20100101 Firefox/133.0",
	    "Accept": "*/*",
	    "Accept-Language": "de,it;q=0.8,en-US;q=0.6,en;q=0.4,fr;q=0.2",
	    "Accept-Encoding": "gzip, deflate, br, zstd",
	    "X-Requested-With": "XMLHttpRequest",
	    "X-MicrosoftAjax": "Delta=true",
	    "Cache-Control": "no-cache",
	    "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
	    "Origin": "https://katalog.burgerbib.ch",
	    "DNT": "1",
	    "Connection": "keep-alive",
	    "Referer": "https://katalog.burgerbib.ch/deskriptorensuche.aspx",
	    "Cookie": "ASP.NET_SessionId=il1vnhjkehgthc4clp4cimzk",
	    "Sec-Fetch-Dest": "empty",
	    "Sec-Fetch-Mode": "cors",
	    "Sec-Fetch-Site": "same-origin",
	    "Sec-GPC": "1",
	    "Priority": "u=0",
	    "content-type": "application/x-www-form-urlencoded"
	}

	response = requests.post(url, data=payload, headers=headers)

	html_doc = response.text

	soup = BeautifulSoup(html_doc, 'html.parser')
	deskRelations = soup.select(".DescriptorLinkTitle")

	if len(deskRelations) > 0:
		for el in deskRelations:
			if len(el.select(".DescriptorRole")) > 0:
				role = el.select(".DescriptorRole")[0].contents

			anchor = el.select("a")[0]
			entity_name = anchor.contents
			entity_id = re.findall(r"(?<=deskriptordetail\.aspx\?Id=)\d{1,15}", anchor["onclick"])
			entry = pl.DataFrame({"desk_id" : desk_id, "role" : role, "entity_name": entity_name, "entity_id": entity_id})
			df = pl.concat([df, entry], how="diagonal")

	with open(personendeskriptoren_zusatz_csv, mode="a+") as f:
		df.write_csv(f, include_header=False)